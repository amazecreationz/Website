'use strict'
var application = angular.module('amazecreationz', ['ui.router', 'ngMaterial', 'ngSanitize', 'ngMessages', 'ngFileUpload']);

application.permissions = {
	ADMIN: 0,
	MANAGER: 1,
	BLOGGER: 2,
	USER: 3,
	VISITOR: 4
}

application.globals = {
	title: 'Amaze Creationz',
	subtitle: 'sleek solutions everywhere',
	theme: 'red',
	logo: '/resources/images/logo/logo.jpg',
	domain: 'amazecreationz.in',
	dateFormat: 'MMM dd, yyyy hh:mm a',
	feedback: {
		email: 'feedback@amazecreationz.in'
	},
	contact: {
		email: 'hey@amazecreationz.in',
		phone: '+91 80 75 688784',
		location: 'CNRA 51, Chempakasseri Nagar,<br>Kesavadasapuram, Trivandrum,<br>Kerala, India.<br>PIN: 695004',
		maps: 'https://www.google.co.in/maps/search/Amaze+Creationz'
	},
	html: {
		views: '/modules/views/',
		templates: '/modules/templates/'
	},
	images: {
		root: '/resources/images/',
		logo: '/resources/images/logo/',
		crew: '/resources/images/crew/',
		gif: '/resources/images/gif/'
	},
	developments: {
		github: 'amazecreationz'
	},
	NotFoundPage: '/modules/views/404.html'
}

application.isLive = document.domain != 'localhost'; 
//application.isLive = true;

application.firebase = {
	live: {
		functionsDomain: 'https://us-central1-amazecreationz-web.cloudfunctions.net'
	},
	local: {
		functionsDomain: 'http://localhost:8010/amazecreationz-web/us-central1'
	}
}

application.config(function($mdThemingProvider) {
  $mdThemingProvider.theme('default')
	.primaryPalette(application.globals.theme, {
		'default': '700',
      	'hue-1': '300',
      	'hue-2': '600',
      	'hue-3': '900'
	})
	.accentPalette(application.globals.theme, {
		'default': '50',
		'hue-1': '50',
      	'hue-2': '50',
      	'hue-3': '50'
	});
});

if(application.isLive) {
	application.firebase.current = application.firebase.live;
} else {
	application.firebase.current = application.firebase.local;
}

var printString = function(value) {
	console.log(JSON.stringify(value));
}
application.constants = {
	tabs: [{
		id: 'home',
		name:'Home',
		title: 'Amaze Creationz | Home',
		icon: 'home',
		state: 'home',
		permission: application.permissions.VISITOR
	},{
		id: 'apps',
		name:'Applications',
		title: 'Amaze Creationz | Applications',
		icon: 'apps',
		state: 'apps',
		stateParams: {type: null},
		permission: application.permissions.VISITOR
	},{
		id: 'console',
		name:'Console',
		title: 'Amaze Creationz | Console',
		icon: 'computer',
		state: 'console',
		permission: application.permissions.MANAGER
	},/*{
		id: 'profile',
		name:'My Profile',
		title: 'Amaze Creationz | My Profile',
		icon: 'face',
		state: 'profile',
		permission: application.permissions.USER
	},*/{
		id: 'about',
		name:'About',
		title: 'Amaze Creationz | About Us',
		icon: 'info_outline',
		state: 'about',
		permission: application.permissions.VISITOR
	},{
		id: 'contact',
		name:'Get In Touch',
		title: 'Amaze Creationz | Get In Touch',
		icon: 'contacts',
		state: 'contact',
		permission: application.permissions.VISITOR
	}],
	crew: {
		levels: [{
			id: 'level0',
			name: 'Level 0',
			value: 0
		},{
			id: 'level1',
			name: 'Level 1',
			value: 1
		},{
			id: 'level2',
			name: 'Level 2',
			value: 2
		},{
			id: 'level3',
			name: 'Level 3',
			value: 3
		},{
			id: 'level4',
			name: 'Level 4',
			value: 4
		}],
		crewTypes: [{
			id: 'fullTime',
			name: 'Full Time'
		},{
			id: 'collaborator',
			name: 'Collaborator'
		}]
	},
	apps: [{
		priority: 2,
		id: 'GPACalculator',
		icon: 'school',
		name: 'GPA Calculator',
		description: 'Calculates GPA of NITC students from Gradecard PDF.',
		page: 'gpa-calculator.html',
		showPage: true,
		background: 'nitc.jpg',
		links: {
			facebook: 'https://www.facebook.com/GPACalculator',
			github: 'https://github.com/amazecreationz/GPACalculator',
			playstore: 'https://play.google.com/store/apps/details?id=com.kkroo.dheeraj.nitcgpa&utm_source=global_co&utm_medium=prtnr&utm_content=Mar2515&utm_campaign=PartBadge&pcampaignid=MKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1'
		},
		development: {
			git: 'GPACalculator',
			contributors: ['anandmoghan', 'dheerajma007']
		}
	},{
		priority: 1,
		id: 'EmployeeMeter',
		icon: 'supervisor_account',
		name: 'Employee Meter',
		description: 'Keep track of your employee\'s attendance and payments.',
		page: 'employee-meter.html',
		showPage: true,
		links: {
			github: 'https://github.com/amazecreationz/EmployeeMeter',
		},
		development: {
			git: 'EmployeeMeter',
			contributors: ['anandmoghan']
		},
		tags: [
			{
				title: 'beta',
				color: '#E53935'
			}
		]
	},{
		id: 'Ideas',
		icon: 'lightbulb_outline',
		name: 'Have an Idea?',
		description: 'Write to us at <a href="mailto:ideas@amazecreationz.in">ideas@amazecreationz.in</a>.<br>We will make it happen. :)',
		showPage: false,
	}],
	query: {
		types: [{
			id: 'query',
			name: 'General Query'
		}, {
			id: 'support',
			name: 'Support'
		}, {
			id: 'feedback',
			name: 'Feedback'
		}]
	}
}
application.controller('AppController', ['$scope', '$state', '$stateParams', 'AppService', 'FirebaseService', function($scope, $state, $stateParams, AppService, FirebaseService){
	$scope.globals = angular.copy(application.globals);
	$scope.globals.permissions = angular.copy(application.permissions);

	$scope.appData = {
		tabs: angular.copy(application.constants.tabs),
		user: {
			permission: $scope.globals.permissions.VISITOR
		}
	};
	
	var setTitle = function(title) {
		$('title').text(title);
	}

	$scope.openSideMenu = function() {
		AppService.openSideMenu();
	}

	$scope.closeSideMenu = function() {
		AppService.closeSideMenu();
	}

	$scope.openTab = function(tab) {
		AppService.closeSideMenu();
		$state.go(tab.state, tab.stateParams , {reload: true});
	}

	$scope.showLogin = function(){
        AppService.showLogin();
    }

	$scope.login = function() {
		AppService.login();
    }

	$scope.signOut = function() {
		AppService.logout(function() {
			$scope.appData.user = {
				permission: $scope.globals.permissions.VISITOR
			};
		})
	}
	
	firebase.auth().onAuthStateChanged(function(user) {
    	if(user){
    		FirebaseService.fetchCurrentUserInfo(function(userInfo) {
				AppService.backgroundLoader(false);
				$scope.appData.user = userInfo;
				AppService.showToast('Signed in as '+$scope.appData.user.name);
			})
		} else {
			AppService.backgroundLoader(false);
		}
    })

   	$scope.$watch('appData.current_tab', function(value){	
		if(value) {
			var tab = _.find($scope.appData.tabs, function(tabData){
				return (tabData.id == value);
			})
			setTitle(tab.title);
		}
	})
}]);
application.config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function($stateProvider, $urlRouterProvider, $locationProvider){

	$stateProvider.state('home', {
		url:'/',
		templateUrl: application.globals.html.views + 'home.html',
		controller: 'HomeController'
	});

	$stateProvider.state('apps', {
		url:'/applications',
		templateUrl: application.globals.html.views + 'applications.html',
		controller: 'ApplicationsController'
	});

	$stateProvider.state('console', {
		url:'/console',
		templateUrl: application.globals.html.views + 'console.html',
		controller: 'ConsoleController'
	});

	$stateProvider.state('console.tab', {
		url:'/:tab?id=',
		templateUrl: application.globals.html.views + 'include.html',
		controller: 'ConsoleTabController'
	});

	$stateProvider.state('profile', {
		url:'/profile',
		templateUrl: application.globals.html.views + 'profile.html',
		controller: 'ProfileController'
	});

	$stateProvider.state('about', {
		url:'/about',
		templateUrl: application.globals.html.views + 'about.html',
		controller: 'AboutController'
	});

	$stateProvider.state('contact', {
		url:'/contact',
		templateUrl: application.globals.html.views + 'contact.html',
		controller: 'ContactController'
	});

	$stateProvider.state('NotFound', {
		params: {
			url: undefined
		},
		templateUrl: application.globals.html.views + '404.html',
		controller: 'NotFoundController'
	});

	$stateProvider.state('view', {
		url:'/:type/:id?params=',
		templateUrl: application.globals.html.views + 'include.html',
		controller: 'IncludeController'
	});

	$urlRouterProvider.otherwise(function($injector, $location){
	    $injector.get('$state').go('NotFound', {url: $location.path()});
	    return $location.path();
	});

	$locationProvider.hashPrefix('');
	$locationProvider.html5Mode(true);
}]);
application.service('AppService', function($state, $stateParams, $location, $mdToast, $mdSidenav, $mdDialog, FirebaseService) {
	var AppService = this;

	this.backgroundLoader = function(showLoader) {
		var loader = $('.loader-shadow');
		if(showLoader) {
			loader.removeClass('hide');
		} else {
			loader.addClass('hide');
		}
	}

	this.openSideMenu = function() {
		$mdSidenav('side-menu').open();
	}

	this.closeSideMenu = function() {
		$mdSidenav('side-menu').close();
	}

	this.showLogin = function() {
		this.openSideMenu();
	}

	this.openURLinNewTab = function(URL) {
		window.open(URL, '_blank');
	}

	this.showToast = function(message, timeout) {
		$mdToast.show({
			hideDelay: timeout || 2000,
			position: 'top right',
			toastClass: 'toast',
			locals:{ 
				toastParams: {
					message: message
				}
			},
			controller: 'ToastController',
			templateUrl: '/modules/templates/toast.html',
			parent: document.getElementsByClassName('body-container')
        });
	}

	this.login = function() {
		AppService.closeSideMenu();
		AppService.backgroundLoader(true);
		var provider = new firebase.auth.GoogleAuthProvider();
		provider.addScope('https://www.googleapis.com/auth/userinfo.profile');
		firebase.auth().signInWithPopup(provider);
	}

	this.logout = function(callback) {
		AppService.closeSideMenu();
		firebase.auth().signOut().then(function() {
			AppService.showToast('Signed out successfully');
			callback();
		}, function(error) {
		});
	}

	this.reloadState = function() {
		$state.reload();
	}

	this.goToState = function(state, stateParams, reload, notify) {
		reload = reload || false;
		notify = angular.isDefined(notify) ? notify : true;
		stateParams = stateParams ? stateParams : {};
		$state.go(state, stateParams, {reload: reload, notify: notify});
	}

	this.goToApplicationPage = function(id) {
		$state.go('view', {type: 'application', id: id});
	}

	this.goToCrewPage = function(id) {
		$state.go('view', {type: 'crew', id: id});
	}

	this.showNotFound = function() {
		$state.go('NotFound', {url: $location.path()});
	}

	this.getPermissionType = function(value) {
		var permissions = angular.copy(application.permissions);
		var permissionType;
		angular.forEach(permissions, function(permission, key) {
			if(value ==  permission) {
				permissionType = key;
			}
		})
		return permissionType;
	}

	this.openUserModel = function(userInfo, permission, state, stateParams) {
		$mdDialog.show({
			controller: 'UserModalController',
			templateUrl: application.globals.html.views + 'modal-user.html',
			parent: angular.element(document.body),
			clickOutsideToClose:true,
			fullscreen: true,
			locals: {
				dialogParams: {
					userInfo: userInfo,
					permission: permission
				}
			}
		}).then(function(dialogData) {
			AppService.goToState(state, stateParams, false, false);
		}, function() {
			AppService.goToState(state, stateParams, false, false);
		});
	}

	this.openCrewModal = function(title, crewInfo, permission, state, stateParams) {
		$mdDialog.show({
			controller: 'CrewModalController',
			templateUrl: application.globals.html.views + 'modal-crew.html',
			parent: angular.element(document.body),
			clickOutsideToClose:true,
			fullscreen: true,
			size: 'lg',
			locals: {
				dialogParams: {
					title: title,
					crewInfo: crewInfo,
					permission: permission
				}
			}
		}).then(function(dialogData) {
			FirebaseService.putCrewInfo(dialogData.uid, dialogData.crewInfo);
			AppService.goToState(state, stateParams, false, false);
		}, function() {
			AppService.goToState(state, stateParams, false, false);
		});
	}

	this.openQueryModal = function(queryInfo, permission, state, stateParams) {
		$mdDialog.show({
			controller: 'QueryModalController',
			templateUrl: application.globals.html.views + 'modal-query.html',
			parent: angular.element(document.body),
			clickOutsideToClose:true,
			fullscreen: true,
			size: 'lg',
			locals: {
				dialogParams: {
					queryInfo: queryInfo,
					permission: permission
				}
			}
		}).then(function(dialogData) {
			AppService.goToState(state, stateParams, false, false);
		}, function() {
			AppService.goToState(state, stateParams, false, false);
		});
	}
});

application.service('FirebaseService', function($filter, FirebaseAPIService) {
	var db = firebase.database().ref();
	var FirebaseService = this;

	this.getAuthToken = function(callback) {
		firebase.auth().currentUser.getToken().then(function(token) {
			callback(token)
		});
	}

	this.getCurrentUserID = function() {
		return firebase.auth().currentUser.uid;
	}

	this.fetchCurrentUserInfo = function(callback) {
		FirebaseService.getAuthToken(function(token) {
			FirebaseAPIService.getWithAuth('/userLogin', token).then(function(data) {
				callback(data.data);
			});
		});
	}

	this.sendNotification = function(notification) {
		var userId = notification.uid;
		db.child('amazecreationz').child('notifications').child(userId).push(notification);
	}

	this.setUserPermission = function(userId, permission) {
		db.child('users').child(userId).child('permission').set(permission);
	}

	this.addFirebaseData = function(dataPoint, dataJSON, operation) {
		if(angular.isUndefined(operation)) {
			operation = 'set';
		}
		try {
			dataJSON = JSON.parse(dataJSON);
			if(operation == 'set') {
				db.child(dataPoint).set(dataJSON);
			} else {
				db.child(dataPoint).push(dataJSON);
			}
		} catch(e) {
			return e;
		}
		return null;	
	}

	this.getUserInfo = function(userId, callback) {
		db.child('users').child(userId).once('value', function(data){
			callback(data.val());	
		});
	}

	this.getAllUsers = function(callback) {
		db.child('users').orderByChild('permission').limitToFirst(20).on('value', function(data){
			callback(data.val());	
		}, function(error) {
			callback(null);
		});
	}

	this.putCrewInfo = function(userId, crewInfo) {
		var isCrew = true;
		var updates = {}
		if(crewInfo == null) {
			isCrew = null;
		}
		delete crewInfo.$$hashKey;
		updates['crew/'+userId] = crewInfo;
	 	updates['users/'+userId+'/crew'] = isCrew;
		db.update(updates);
	}

	this.getCrewInfo = function(userId, callback) {
		db.child('crew').child(userId).once('value', function(data){
			callback(data.val());	
		});
	}

	this.getCrewInfoFromURL = function(crewURL, callback) {
		db.child('crew').orderByChild('crewURL').equalTo(crewURL).once('value', function(data){
			var crewInfo;
			if(data.val() != null) {
				crewInfo = _.find(data.val(), function(crewInfo, userId) {
					return crewInfo.crewURL == crewURL;
				})
			}
			callback(crewInfo);	
		});
	}

	this.getCrewInfo = function(param, callback) {
		FirebaseService.getCrewInfo(param, function(crewInfo) {
			if(crewInfo != null) {
				callback(crewInfo);
			}
		})

		FirebaseService.getCrewInfoFromURL(param, function(crewInfo) {
			if(crewInfo != null) {
				callback(crewInfo);
			}
		})
	}

	this.getCompleteCrewData = function(param, callback) {
		FirebaseService.getCrewInfoFromURL(param, callback);
	}

	this.getCrewExcludedUsers = function(callback) {
		db.child('users').orderByChild('crew').equalTo(null).limitToFirst(20).once('value', function(data){
			callback(data.val());	
		});
	}

	this.getAllCrew = function(callback) {
		db.child('crew').limitToFirst(20).on('value', function(data){
			callback(data.val());	
		});
	}

	this.getContributor = function(crewURL, callback) {
		FirebaseService.getCrewInfoFromURL(crewURL, function(crewInfo) {
			callback(null, crewInfo);
		})
	}

	this.getContributors = function(contributors, callback) {
		async.map(contributors, FirebaseService.getContributor, function(errors, contributorsList) {
			callback(contributorsList);
		})
	}

	this.addQuery = function(query, callback) {
		var result = {
			message: "Failed to send query. Try again later."
		}
		var queryId = db.child('query').child('amazecreationz').push().key;
		query.id = queryId;
		db.child('amazecreationz').child('query').child(queryId).set(query).then(function(error) {
			result = {
				status: 1,
				message: "Query sent!"
			}
			callback(result);
		}, function(error) {
			callback(result);
		})
	}

	this.setQueryAttended = function(queryId) {
		db.child('amazecreationz').child('query').child(queryId).child('attended').set(true);
	}

	this.getQuery = function(queryId, callback) {
		db.child('amazecreationz').child('query').child(queryId).once('value', function(data) {
			callback(data.val());
		})
	}

	this.deleteQuery = function(queryId) {
		db.child('amazecreationz').child('query').child(queryId).set(null);
	} 

	this.getAllQuery = function(callback) {
		db.child('amazecreationz').child('query').limitToFirst(50).on('value', function(data) {
			callback(data.val());
		}, function(error) {
			callback(null);
		})
	}

	this.getAttendedQueries = function(callback) {
		db.child('amazecreationz').child('query').orderByChild('attended').equalTo(true).limitToFirst(50).on('value', function(data) {
			callback(data.val());
		}, function(error) {
			callback(null);
		})
	}

	this.getUnAttendedQueries = function(callback) {
		db.child('amazecreationz').child('query').orderByChild('attended').equalTo(null).limitToFirst(50).on('value', function(data) {
			callback(data.val());
		}, function(error) {
			callback(null);
		})
	}

	this.setQueryReply = function(query) {
		db.child('amazecreationz').child('query').child(query.id).set(query);
	}

	this.sendQueryReply = function(query, callback) {
		var date = new Date().getTime();
		query.replyDate = date;
		query.attended = true;
		delete query.$$hashKey;
		if(query.uid) {
			var notification = {
				uid: query.uid,
				type: 'query',
				date: date,
				query: query.content,
				reply: query.reply,
				message: 'Reply for your query - '+ query.content
			}
			FirebaseService.sendNotification(notification);
		}
		FirebaseService.getAuthToken(function(token) {
			var params = {
				content: JSON.stringify({
					email: query.email,
					date: query.date,
					subject: "Query on "+$filter('date')(query.date, application.globals.dateFormat),
					body: "Query: "+query.content+"<br>Response: "+query.reply
				})
			}
			FirebaseAPIService.getWithAuth('/sendReply', token, params).then(function(data) {
				FirebaseService.setQueryReply(query);
				callback(data.data);
			})
		})		
	}
})

application.service('FirebaseAPIService', function($http) {
	var APIDomain = angular.copy(application.firebase.current.functionsDomain);
	var FirebaseAPIService = this;

	this.getAPIWithParams = function(API, params) {
		var paramsURL = '?';
		angular.forEach(params, function(value, key) {
			paramsURL += key+'='+value+'&';
		})
		paramsURL = paramsURL.substring(0, paramsURL.length - 1);
		return API + paramsURL;
	}

	this.get = function(API) {
		var APIUrl = APIDomain + API;
		return $http({
			method: 'GET',
            url: APIUrl,
            cache: false
        });
	}

	this.getWithAuth = function(API, authToken, params) {
		if(angular.isUndefined(params)) {
			params = {};
		}
		params.authToken = authToken;
		API = FirebaseAPIService.getAPIWithParams(API, params);
		return FirebaseAPIService.get(API);
	}
})


application.service('GitHubService', function($http) {
	var baseURL = 'https://api.github.com/repos/' +application.globals.developments.github+'/';
	var GitHubService = this;

	this.getCommits = function(repo, limitTo, callback) {
		if(limitTo == null) {
			limitTo = 5;
		}
		var apiURL = baseURL + repo + '/commits?per_page='+limitTo;
		$http({
			method: 'GET',
			url: apiURL,
			cache: true
		}).then(function(data) {
			var commits = [];
			angular.forEach(data.data, function(commitData) {
				var commitInfo = {
					message: commitData.commit.message,
					committer: commitData.commit.committer.name,
					url: commitData.html_url,
					date: commitData.commit.committer.date
				}
				commits.push(commitInfo);
			})
			callback(commits)
		}, function(error) {
			callback(null)
		})
	}

	this.getUserInfo = function(URL, callback) {
		$http({
			method: 'GET',
			url: URL,
			cache: true
		}).then(function(data) {
			var info = {
				name: data.data.name,
				email: data.data.email,
				image: data.data.avatar_url,
				followers: data.data.followers,
				url: data.data.html_url
			}
			callback(null, info);
		}, function(error) {
			callback(null, null)
		})
	}

	this.getContributors = function(repo, callback) {
		var apiURL = baseURL + repo + '/contributors';
		$http({
			method: 'GET',
			url: apiURL,
			cache: true
		}).then(function(data) {
			var contributors = [];
			angular.forEach(data.data, function(contributor) {
				contributors.push(contributor.url);
			})
			async.map(contributors, GitHubService.getUserInfo, function(errors, contributorsList) {
				callback(contributorsList);
			})
		}, function(error) {
			callback(null)
		})
	}
})
application.controller('ToastController', ['$scope', '$mdToast', 'toastParams', function($scope, $mdToast, toastParams){
	$scope.toast = toastParams;

	$scope.closeToast = function() {
		$mdToast.hide();
	}
}]);

application.controller('HomeController', ['$scope', 'AppService', function($scope, AppService){
	$scope.appData.current_tab = 'home';
	$scope.appsInfo = angular.copy(application.constants.apps);

	$scope.goToApplicationPage = function(id) {
		AppService.goToApplicationPage(id);
	}
}]);

application.controller('ApplicationsController', ['$scope', function($scope){
	$scope.appData.current_tab = 'apps';
	$scope.appsInfo = angular.copy(application.constants.apps);
}]);

application.controller('ConsoleController', ['$scope', '$state', 'AppService', function($scope, $state, AppService){
	$scope.appData.current_tab = 'console';

	$scope.console = {
		tabs: [{
			id: 'users',
			name: 'Users',
		},{
			id: 'crew',
			name: 'Crew'
		},{
			id: 'query',
			name: 'Query'
		},{
			id: 'firebase',
			name: 'Firebase'
		}]
	};

	var tabState = 'console.tab';
	var tabId =  $state.params.tab;
	var params = $state.params.id;
	$scope.console.currentTab = 'users';

	var setTabState = function(tabId) {
		AppService.goToState(tabState, {tab: tabId, id:  null});
	}

	if(angular.isUndefined(tabId)) {
		tabId = $scope.console.currentTab;
		setTabState(tabId);
	}

	$scope.console.onTabSelect = function(tab) {
		$scope.console.currentTab = tab.id;
		setTabState(tab.id)
	}

	$scope.grantAdminPrevilages = function() {
		$scope.appData.user.permission = $scope.globals.permissions.ADMIN;
	}
}]);

application.controller('ConsoleTabController', ['$scope', '$rootScope', '$state', '$mdDialog', 'AppService', 'FirebaseService', 'FirebaseAPIService', function($scope, $rootScope, $state, $mdDialog, AppService, FirebaseService, FirebaseAPIService){
	var currentState = $state.current.name;
	var tabId =  $state.params.tab;
	var params = $state.params.id;

	$scope.console.currentTab = tabId;
	$scope.$parent.viewHtml = $scope.globals.html.views + 'console-' + tabId +'.html';

	var setParams = function(param) {
		AppService.goToState(currentState, {id: param}, false, false);
	}

	var openUserModal = function(userInfo) {
		AppService.openUserModel(userInfo, $scope.appData.user.permission, currentState, {tab: tabId, id: null});
	}

	var openCrewModal = function(title, crewInfo) {
		AppService.openCrewModal(title, crewInfo, $scope.appData.user.permission, currentState, {tab: tabId, id: null});
	}

	var openQueryModal = function(queryInfo) {
		AppService.openQueryModal(queryInfo, $scope.appData.user.permission, currentState, {tab: tabId, id: null})
	}


	var setUsersTabData = function() {
		if(params) {
			try{
				FirebaseService.getUserInfo(params, function(userInfo) {
					if(userInfo == null) {
						AppService.showNotFound();
					}
					openUserModal(userInfo);
				})
				
			} catch(e) {
				AppService.goToState(currentState, {tab: tabId, id:  null});
			}
		}

		FirebaseService.getAllUsers(function(users) {
			$scope.console.admins = _.filter(users, function(user, userId) {
	    		return user.permission == $scope.globals.permissions.ADMIN;
	    	});

	    	$scope.console.managers = _.filter(users, function(user, userId) {
	    		return user.permission == $scope.globals.permissions.MANAGER;
	    	});

	    	$scope.console.bloggers = _.filter(users, function(user, userId) {
	    		return user.permission == $scope.globals.permissions.BLOGGER;
	    	});

	    	$scope.console.users = _.filter(users, function(user, userId) {
	    		return user.permission == $scope.globals.permissions.USER;
	    	});
	    	_.defer(function(){$scope.$apply();});
		});
	}

	var setCrewTabData = function() {
		if(params) {
			try{
				FirebaseService.getCrewInfoFromURL(params, function(crewInfo){
					if(crewInfo == null) {
						AppService.showNotFound();
					}
					openCrewModal(crewInfo.name, crewInfo);
				})
			} catch(e) {
				AppService.goToState(currentState, {tab: tabId, id:  null});
			}
		}

		$scope.console.buttonLabel = "Add Crew";
		$scope.console.onButtonClick = function() {
			openCrewModal("Add Crew")
		};
		
		FirebaseService.getAllCrew(function(users) {
			$scope.console.fullTime = _.filter(users, function(user, userId) {
	    		return user.crewType == 'fullTime';
	    	});
	    	$scope.console.collaborators = _.filter(users, function(user, userId) {
	    		return user.crewType == 'collaborator';
	    	});
			_.defer(function(){$scope.$apply();});
		});
	}

	var setQueryTabData = function() {
		if(params) {
			try{
				FirebaseService.getQuery(params, function(queryInfo){
					if(queryInfo == null) {
						AppService.showNotFound();
					}
					openQueryModal(queryInfo);
				})
			} catch(e) {
				AppService.goToState(currentState, {tab: tabId, id:  null});
			}
		}
		FirebaseService.getUnAttendedQueries(function(queries) {
			$scope.console.userQuery = _.filter(queries, function(query) {
				return query.uid;
			});
			$scope.console.visitorQuery = _.filter(queries, function(query) {
				return !query.uid;
			});
			_.defer(function(){$scope.$apply();});
		})

		FirebaseService.getAttendedQueries(function(queries) {
			$scope.console.attendedQuery = _.filter(queries, function(query) {
				return true;
			});
			_.defer(function(){$scope.$apply();});
		})
	}

	var setFirebaseTabData = function() {
		$scope.console.firebase = {
			operation: 'set'
		};
	}

	$scope.onUserSelect = function(userInfo) {
		openUserModal(userInfo)
		setParams(userInfo.uid);
	}

	$scope.onCrewSelect = function(crewInfo) {
		openCrewModal(crewInfo.name, crewInfo);
		setParams(crewInfo.crewURL);
	};

	$scope.onQuerySelect = function(queryInfo) {
		openQueryModal(queryInfo);
		setParams(queryInfo.id);
	}

	$scope.deleteQuery = function(queryId) {
		FirebaseService.deleteQuery(queryId);
	}

	$scope.onFirebaseSave = function() {
		var error = FirebaseService.addFirebaseData($scope.console.firebase.dataPoint, $scope.console.firebase.dataJSON, $scope.console.firebase.operation);
		if(error == null) {
			setFirebaseTabData();
		} else {
			window.alert(error);
		}
	}

	$rootScope.$on('$stateChangeStart', function() {
		$mdDialog.cancel();
	})

	$scope.$watch('appData.user', function(user) {
		if(angular.isDefined(user.name)) {
			$scope.console.buttonLabel = null;
			switch(tabId) {
				case 'users': setUsersTabData();
					break;
				case 'crew': setCrewTabData();
					break;
				case 'query': setQueryTabData();
					break;
				case 'firebase': setFirebaseTabData();
					break;
				default: AppService.showNotFound();
			}
		}
	})	
}]);

application.controller('ProfileController', ['$scope', function($scope){
	$scope.appData.current_tab = 'profile';
}]);

application.controller('AboutController', ['$scope', 'AppService', 'FirebaseService', function($scope, AppService, FirebaseService){
	$scope.appData.current_tab = 'about';
	$scope.crewList = {};

	FirebaseService.getAllCrew(function(users) {
		$scope.crewList.fullTime = _.filter(users, function(user, userId) {
    		return user.crewType == 'fullTime';
    	});
    	$scope.crewList.collaborators = _.filter(users, function(user, userId) {
    		return user.crewType == 'collaborator';
    	});
		_.defer(function(){$scope.$apply();});
	});

	$scope.onCrewSelect = function(crewInfo) {
		AppService.goToCrewPage(crewInfo.crewURL);
	}
}]);

application.controller('ContactController', ['$scope', 'AppService', 'FirebaseService', function($scope, AppService, FirebaseService){
	$scope.appData.current_tab = 'contact';
	$scope.contacts = angular.copy(application.globals.contact);
	$scope.query = {};
	$scope.showForm = false;

	$scope.$watch('appData.user', function(user) {
		if(angular.isDefined(user.uid)) {
			$scope.query.name = user.name;
			$scope.query.email = user.email;
			$scope.query.uid = user.uid;
		}
		$scope.showForm = true;

		$scope.submitQuery = function() {
			$scope.query.date = new Date().getTime();
			FirebaseService.addQuery($scope.query, function(data) {
				AppService.showToast(data.message);
				if(data.status) {
					delete $scope.query.content;
					AppService.reloadState();
				}
			});		
		}
	})
}]);

application.controller('IncludeController', ['$scope', '$state', '$stateParams', 'AppService', 'FirebaseService', 'GitHubService', function($scope, $state, $stateParams, AppService, FirebaseService, GitHubService){
	var type = $stateParams.type;
	var id = $stateParams.id;

	var goToApplication = function(id) {
		var appsInfo = angular.copy(application.constants.apps);
		var appInfo = _.find(appsInfo, function(appInfo) {
			return appInfo.id == id;
		})

		if(!appInfo || !appInfo.showPage || !appInfo.page) {
			AppService.showNotFound();
			return;
		}

		$scope.viewHtml = $scope.globals.html.views + appInfo.page;
		$scope.appInfo = appInfo;

		if(angular.isDefined(appInfo.development)) {
			if(angular.isDefined(appInfo.development.contributors)) {
				FirebaseService.getContributors(appInfo.development.contributors, function(data) {
					$scope.appInfo.contributorsList = data;
					_.defer(function(){$scope.$apply();});
				})
			}

			if(angular.isDefined(appInfo.development.git)) {
				GitHubService.getCommits(appInfo.development.git, 10, function(data) {
					$scope.appInfo.gitCommits = data;
					_.defer(function(){$scope.$apply();});
				})
			}
		}

		$scope.onCrewSelect = function(crewInfo) {
			AppService.goToCrewPage(crewInfo.crewURL);
		}
	}

	var goToCrew = function(id) {
		$scope.viewHtml = '/modules/views/crew-page.html';
		FirebaseService.getCompleteCrewData(id, function(crewData) {
			if(crewData == null) {
				AppService.showNotFound();
			}
			$scope.crewInfo = crewData;
			_.defer(function(){$scope.$apply();});
		})
	}

	switch(type) {
		case 'application': 
			$scope.appData.current_tab = 'apps';
			goToApplication(id);
			break;
		case 'crew': 
			$scope.appData.current_tab = null;
			goToCrew(id);
			break;
		default: AppService.showNotFound();
	}
}]);

application.controller('NotFoundController', ['$scope', '$stateParams', function($scope, $stateParams){
	$scope.url = $stateParams.url;
}]);
application.controller('CrewController', ['$scope', '$state', '$stateParams', function($scope, $state, $stateParams){
	var params = $stateParams.params;
	var id = $stateParams.id;

	var setParams = function(params) {
		$state.go('view', {params: params})
	}
}]);

application.controller('UserModalController', ['$scope', '$state', '$stateParams', 'dialogParams', '$mdDialog', 'AppService', 'FirebaseService', function($scope, $state, $stateParams, dialogParams, $mdDialog, AppService, FirebaseService){
	$scope.dialog = {
		currentUser: dialogParams.userInfo.uid == FirebaseService.getCurrentUserID(),
		permission: dialogParams.permission,
		permissions: angular.copy(application.permissions)
	};

	$scope.userInfo = dialogParams.userInfo;

	delete $scope.dialog.permissions.VISITOR;

	$scope.cancel = function() {
		$mdDialog.cancel();
	};

	$scope.setPermission = function() {
		FirebaseService.setUserPermission($scope.userInfo.uid, $scope.userInfo.permission);
	}

	$scope.getPermissionLabel = function(permission) {
		return AppService.getPermissionType(permission);
	}
}]);

application.controller('CrewModalController', ['$scope', '$state', '$stateParams', '$mdDialog', 'dialogParams', 'FirebaseService', function($scope, $state, $stateParams, $mdDialog, dialogParams, FirebaseService){
	$scope.dialog = {
		levels: angular.copy(application.constants.crew.levels),
		crewTypes: angular.copy(application.constants.crew.crewTypes),
		permission: dialogParams.permission,
		permissions: angular.copy(application.permissions),
		title: dialogParams.title
	}	

	if(angular.isDefined(dialogParams.crewInfo)) {
		$scope.crewInfo = dialogParams.crewInfo;
		$scope.crewId = dialogParams.crewInfo.uid;
	}

	FirebaseService.getCrewExcludedUsers(function(users) {
		$scope.users = _.filter(users, function(user, userId) {
    		return true;
    	});
    	_.defer(function(){$scope.$apply();});
	})

	$scope.setDefault = function(crewType) {
		if(crewType == 'fullTime') {
			$scope.crewInfo.level = 4;
			$scope.crewInfo.designation = 'Developer';
		} else {
			delete $scope.crewInfo.level;
			delete $scope.crewInfo.designation;
		}
		$scope.crewInfo.crewType = crewType;
	}

	$scope.deleteCrew = function() {
		var dialogData = {
			uid: $scope.crewId,
			crewInfo: null
		}
		$mdDialog.hide(dialogData);
	}

	$scope.saveCrew = function() {
		var dialogData = {
			uid: $scope.crewId,
			crewInfo: $scope.crewInfo
		}
		$mdDialog.hide(dialogData);
	}

	$scope.onUserSelect = function(userInfo) {
		$scope.newCrew = true;
		$scope.crewInfo = {
			name: userInfo.name,
			email: userInfo.email,
			uid: userInfo.uid,
			image: userInfo.image,
			crewURL: userInfo.uid
		}
		$scope.crewId = userInfo.uid;
		$scope.dialog.title = userInfo.name;
		$scope.setDefault(angular.copy(application.constants.crew.crewTypes[0].id))
	}

	$scope.getCrewTypeLabel = function(crewType) {
		return _.find($scope.dialog.crewTypes, function(crew) {
			return crew.id == crewType;
		}).name;
	}

	$scope.cancel = function() {
		$mdDialog.cancel();
	};
}]);

application.controller('QueryModalController', ['$scope', '$state', '$stateParams', 'dialogParams', '$mdDialog', 'AppService', 'FirebaseService', function($scope, $state, $stateParams, dialogParams, $mdDialog, AppService, FirebaseService){
	$scope.dialog = {
		permission: dialogParams.permission,
		permissions: angular.copy(application.permissions),
		dateFormat: angular.copy(application.globals.dateFormat)
	};

	$scope.query = dialogParams.queryInfo;
	$scope.showLoader = false;

	delete $scope.dialog.permissions.VISITOR;

	$scope.sendReply = function() {
		$scope.showLoader = true;
		FirebaseService.sendQueryReply($scope.query, function(data) {
			AppService.showToast(data.message);
			if(data.status) {
				$mdDialog.hide();
			}
			$scope.showLoader = false;
		})
	}

	$scope.cancel = function() {
		$mdDialog.cancel();
	};
}]);

application.controller('GPACalcController', ['$scope', '$state', '$stateParams', 'AppService', 'FirebaseService', 'GitHubService', function($scope, $state, $stateParams, AppService, FirebaseService, GitHubService){
	var params = $stateParams.params;
	var id = $stateParams.id;

	var setParams = function(params) {
		$state.go('view', {params: params})
	}

	$scope.uploadLoader = false;
	$scope.resultsLoader = false;

	$scope.showError = function(value) {
		if(value == 0){
			$scope.errorMessage = 'Select a valid gradecard pdf.'
		}
	}

	$scope.selectGC = function(file) { $scope.gradecard = file; };

	$scope.uploadGC = function() {
		$scope.errorMessage = '';
		$scope.uploadLoader = true;
		$('#showmore').addClass('hide');
		$('#viewresults').removeClass('hide');
		var gradecardName = $scope.appData.user.uid+'.pdf';
		firebase.storage().ref().child('appData').child('gradecards').child(gradecardName).put($scope.gradecard).then(function(snapshot) {
			$scope.gradecard = undefined;
			$scope.uploadLoader = false;
			$scope.resultsLoader = true;
			_.defer(function(){$scope.$apply();});
			var resultsTop = angular.element(document.getElementById('dummy-results')).prop('offsetTop')-20;
			$('.body-container').animate({scrollTop: resultsTop}, 800);
		}, function(error){
			$scope.errorMessage = JSON.stringify(error);
			_.defer(function(){$scope.$apply();});
		});
	}

	var setResults = function(uid) {
		var db_ref = firebase.database().ref();
		db_ref.child('gradedata').child(uid).on('value', function(data){
			$scope.gradecardData = JSON.parse(data.val());
			$scope.resultsLoader = false;
			_.defer(function(){$scope.$apply();});
		});
	}

	$scope.showResults = function() {
		var db_ref = firebase.database().ref();
		db_ref.child('sgpacharts').child($scope.appData.user.uid).on('value', function(data){
			$scope.sgpaChartData = data.val();
			_.defer(function(){$scope.$apply();});
			$('#showmore').removeClass('hide');
			$('#viewresults').addClass('hide');
		});
	}

	$scope.downloadResults = function() {
		alert("Download will be available in the coming version! Wait for it! :)")
	}

	$scope.$watch('appData.user', function(user) {
		if(user.uid) {
			var fileName = 'appData/gradecards/'+user.uid+'.pdf';
			firebase.database().ref('appData/GPACalculator').child(user.uid).child('gradecard').set(fileName)
		}
	})
}]);

application.controller('EmployeeMeterController', ['$scope', '$state', '$stateParams', 'AppService', 'FirebaseService', 'GitHubService', function($scope, $state, $stateParams, AppService, FirebaseService){
	var params = $stateParams.params;
	var id = $stateParams.id;

	var setParams = function(params) {
		$state.go('view', {params: params})
	}
}]);
application.directive("imageLoad", [function() {
    return {
        restrict: "A",
        scope: {
            location: '=',
            image: '='
        },
        link: function(scope, elements, attributes) {
            scope.$watch('image', function(image){
                var location = scope.location ? scope.location : '';
                var img_url = location+image;
                var img = new Image();
                img.src = img_url;
                img.onload = function() {
                  $(elements[0]).css({'background-image':'url('+img.src+')'});
                } 
            })
            
        }
    }
}]);

application.directive("pageScroll", [function() {
    return {
        restrict: "E",
        scope: {
            container: '=',
            animationTime: '='
        },
        link: function(scope, elements, attributes) {
            var containerElement = $(scope.container);
            var animationTime = scope.animationTime || 1000;
            var containerOffset = containerElement.position().top;
            var containerHeight = $(window).height() - containerOffset;
            var parentId = elements.attr('id') || 'page-scroll';
            var children = elements.children();
            var scrollTop = containerElement.scrollTop();
            var isScrolling = false;

            var getChildId = function(position) {
                return parentId +'-child-'+ position;
            }

            angular.forEach(children, function(child, index) {
                $(child).addClass('full-height');
                $(child).attr('id', getChildId(index));
            });

            var scrollTo = function(value) {
                isScrolling = true;
                containerElement.animate({
                    scrollTop: value
                }, animationTime, function() {
                    isScrolling = false;
                });
            }

            containerElement.scroll(function() {
                if(isScrolling) {
                    return;
                }
                var newScrollTop = containerElement.scrollTop();
                if(newScrollTop > scrollTop - 5 && newScrollTop < scrollTop + 5) {
                    return;
                }
                else if(newScrollTop > scrollTop) {
                    scrollTop += containerHeight;
                }
                else {
                    scrollTop -= containerHeight;
                }
                scrollTo(scrollTop);
            });

            $(window).resize(function() {
                containerOffset = containerElement.position().top;
                containerHeight = $(window).height() - containerOffset;
                scrollTop = Math.floor(scrollTop / containerHeight)  * containerHeight;
            })
        }
    }
}]);

application.directive("loader", ['$compile', function($compile) {
    return {
        restrict: "E",
        scope: {
            loader: '=',
        },
        template: '<div ng-if="loader" class="mrg20" layout="row" layout-align="space-around"><md-progress-circular class="md-primary" md-diameter="40"></md-progress-circular></div',
        link: function(scope, elements, attributes) {}
    }
}]);

application.directive("pageHeader", [function() {
    return {
        restrict: "E",
        replace: true,
        scope: {
            theme: '=',
            header: '@',
            tabs: '=',
            currentTab: '=',
            onTabSelect: '=',
            buttonLabel: '@',
            buttonClick: '=',
            menuItems: '=',
            menuFunction: '='
        },
        templateUrl: application.globals.html.templates + 'page-header.html',
        link: function(scope, elements, attributes) {
            if(scope.tabs && !scope.currentTab) {
                scope.currentTab = scope.tabs[0].id;
            }
            
            scope.changeTab = function(tab) {
                scope.currentTab = tab.id;
                scope.onTabSelect(tab);
            }
        }  
    }
}]);

application.directive("permissionCheck", ['$compile', 'AppService', function($compile, AppService) {
    return {
        restrict: "A",
        scope: {
            permissionCheck: '=',
            minPermission: '='
        },
        link: function(scope, elements, attributes) {
            var body = $(elements);
            var permissions = angular.copy(application.permissions);
            var minPermission = scope.minPermission;
            var bodyHtml = body.html();
            var emptyDiv = '<div class="padtb15"></div>'
            var loginMessageHtml = '<span>You have to <span class="text-bold pointer" ng-click="showLogin()">login</span> to view this content.</span>'
            var permissionsMessageHtml = '<span>You don\'t have sufficient permissions to view this content. Contact Administrator.</span>'
            
            $(emptyDiv).insertAfter(body);
            var messageDiv = body.next();

            scope.showLogin = function(){
                AppService.showLogin();
            }

            scope.$watch('permissionCheck', function(permissionCheck){
                messageDiv.removeClass('hide');
                body.addClass('hide');

                var bodyContentHtml;
                
                if(permissionCheck == permissions.VISITOR && permissionCheck > minPermission) {
                    bodyContentHtml = loginMessageHtml;
                } else if(permissionCheck > minPermission) {
                    bodyContentHtml = permissionsMessageHtml;
                }
                else {
                    bodyContentHtml = null;
                    messageDiv.addClass('hide');
                    body.removeClass('hide');
                }
                
                messageDiv.html($compile(bodyContentHtml)(scope));
            })
        }
    }
}]);


application.directive("listLoader", ['$compile', function($compile) {
    return {
        restrict: "E",
        scope: {
            list: '=',
            listParam: '@',
            message: '='
        },
        template: '<div class="hide"></div>',
        link: function(scope, elements, attributes) {
            var messageHtml;
            var loaderHtml = '<loader flex="100" loader="showLoader"></loader>'
            var body = $(elements[0]);

            $($compile(loaderHtml)(scope)).insertAfter(body);
            scope.showLoader = true;

            if(scope.message){
                messageHtml = scope.message;
            } else {
                messageHtml = 'No '+scope.listParam+' Found.'
            }
            body.html(messageHtml)
            
            scope.$watch('list', function(list){
                if(angular.isUndefined(list)) {
                    scope.showLoader = true;
                    body.addClass('hide')
                } 
                else if(_.isEmpty(list)) {
                    scope.showLoader = false;
                    body.removeClass('hide');
                }
                else {
                    scope.showLoader = false;
                    body.addClass('hide')
                }
            })
            
        }
    }
}]);

application.directive("appCard", ['AppService', function(AppService) {
    return {
        restrict: "E",
        scope: {
            appInfo: '=',
            index: '='
        },
        templateUrl: application.globals.html.templates + 'app-card.html',
        link: function(scope, elements, attributes) {
            scope.index += 1;
            var element = elements[0];
            if(scope.index % 3 == 0) {
                $(element).addClass('third');
            }
            else if(scope.index % 3 == 1) {
                $(element).addClass('first');
            }

            scope.goToApplicationPage = function() {
                AppService.goToApplicationPage(scope.appInfo.id);
            }
        }
    }
}]);

application.directive("user", ['FirebaseService', function(FirebaseService) {
    return {
        restrict: "E",
        scope: {
            userInfo: '=',
            userId: '=',
            onClick: '='
        },
        templateUrl: application.globals.html.templates + 'user.html',
        link: function(scope, elements, attributes) {
            if(scope.userInfo) {
                scope.userData = scope.userInfo;
            }
            else if(scope.userId) {
                FirebaseService.getUserInfo(scope.userId, function(userInfo) {
                    scope.userData = userInfo;
                });
            }
        }
    }
}]);

application.directive("crew", ['FirebaseService', function(FirebaseService) {
    return {
        restrict: "E",
        scope: {
            crewInfo: '=',
            crewUrl: '=',
            isSmall: '=',
            onClick: '='
        },
        templateUrl: application.globals.html.templates + 'crew.html',
        link: function(scope, elements, attributes) {
            if(angular.isDefined(scope.crewUrl)) {
                FirebaseService.getCrewInfoFromURL(scope.crewUrl, function(crewInfo) {
                    scope.crewInfo = crewInfo;
                    _.defer(function(){scope.$apply();});
                })
            }
        }
    }
}]);

application.directive("contributor", ['AppService', function(AppService) {
    return {
        restrict: "E",
        scope: {
            crewInfo: '=',
            onClick: '='
        },
        templateUrl: application.globals.html.templates + 'contributor.html',
        link: function(scope, elements, attributes) {}
    }
}]);

application.directive("gitCommit", ['AppService', function(AppService) {
    return {
        restrict: "E",
        scope: {
            commitInfo: '='
        },
        templateUrl: application.globals.html.templates + 'git-commit.html',
        link: function(scope, elements, attributes) {
            scope.dateFormat = angular.copy(application.globals.dateFormat);
            scope.viewCommit = function() {
                AppService.openURLinNewTab(scope.commitInfo.url);
            }
        }
    }
}]);

/*
widget: Tags
tagdata: Tags Info Object
*/
application.directive('tags', ['$state', function($state) {
    return {
        restrict:'E',
        scope: {
            tagData: '='
        },
        template: "<span ng-repeat=\"tag in tagData | orderBy : 'priority' : true\" style='background-color: {{tag.color}}; padding: 5px 10px; margin: 0 5px; color: #FFF'>{{tag.title}}</span>",
        link: function (scope, elements, attributes) {}
    }
}]);




/*
widget: Get from Play Store
link: playstore link
height: (optional) height of image - default height: 30px
*/
application.directive('googlePlay', ['$state', function($state) {
    return {
        restrict:'E',
        scope: {
            link: '@',
            height: '@'
        },
        template: '<a href="{{link}}" target="_blank"><img alt="Get it on Google Play" ng-style="imgClass" src="/resources/images/google-play-badge.png"/></a>',
        link: function (scope, elements, attributes) {
            if(angular.isUndefined(scope.height)){
                scope.imgClass={
                    'height': '30px',
                    'width': 'auto'
                };
            }
            else {
                scope.imgClass={
                    'height': scope.height,
                    'width': 'auto'
                };
            }
        }
    }
}]);
application.filter('isEmpty', function() {
	return function(input, inverse) {
		if(!inverse) {
			inverse = false;
		}
		var output = _.isEmpty(input);
    	return output != inverse;
  	}
})

application.filter('permission', function() {
	return function(input, permission) {
    	var output = _.filter(input, function(user, userId) {
    		return user.permission == permission;
    	});
    	return output
  	}
})