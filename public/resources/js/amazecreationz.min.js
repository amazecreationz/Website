'use strict'
var application = angular.module('amazecreationz', ['ui.router', 'ngMaterial', 'ngSanitize', 'ngMessages', 'ngFileUpload']);

application.permissions = {
	ADMIN: 0,
	MANAGER: 1,
	BLOGGER: 2,
	VERIFIED_USER: 3,
	USER: 4,
	VISITOR: 5
}

application.globals = {
	title: 'Amaze Creationz',
	subtitle: 'sleek solutions everywhere',
	theme: 'blue-grey',
	logo: 'https://static.amazecreationz.in/images/logo/logo.jpg',
	domain: 'amazecreationz.in',
	dateFormat: 'MMM dd, yyyy hh:mm a',
	feedback: {
		email: 'feedback@amazecreationz.in'
	},
	contact: {
		email: 'hey@amazecreationz.in',
		phone: '+91 80 75 688784',
		location: 'CNRA 51, Chempakasseri Nagar,<br>Kesavadasapuram, Trivandrum,<br>Kerala, India.<br>PIN: 695004',
		maps: 'https://www.google.co.in/maps/search/Amaze+Creationz'
	},
	social: {
		github: 'amazecreationz',
		facebook: 'amazecreationz',
		twitter: 'amazecreationz',
		google: '+amazecreationz',
		linkedin: 'company/amazecreationz',
		instagram: 'amazecreationz',
		youtube: 'amazecreationz'
	},
	html: {
		views: '/modules/views/',
		templates: '/modules/templates/'
	},
	styles: 'https://static.amazecreationz.in/latest/css/',
	images: {
		root: '/images/',
		thumbs: '/images/thumbs/',
		logo: '/images/logo/',
		gif: '/images/gif/',
		icons: '/images/icons/'
	},
	logo: 'https://static.amazecreationz.in/images/logo/logo-circle-250.png',
	logo_square: 'https://static.amazecreationz.in/images/logo/logo.jpg',
	developments: {
		github: 'amazecreationz'
	},
	NotFoundPage: '/modules/views/404.html',
	showFooter: true
}

application.isLive = document.domain != 'localhost'; 
application.isLive = true;

application.mailingDomain = {
	live: 'https://mail-amazecreationz.rhcloud.com',
	local: 'http://localhost:3030'
}

application.javaServerDomain = {
	current: 'https://javaserver-amazecreationz.rhcloud.com'
}

application.firebase = {
	live: {
		functionsDomain: 'https://us-central1-amazecreationz-web.cloudfunctions.net'
	},
	local: {
		functionsDomain: 'http://localhost:8010/amazecreationz-web/us-central1'
	}
}

application.colors = ['#D32F2F', '#C2185B', '#7B1FA2', '#512DA8', '#1976D2', '#616161', '#0097A7', '#00796B', '#388E3C', '#689F38', '#AFB42B', '#FBC02D', '#FFA000', '#E64A19', '#5D4037', '#455A64']

if(application.isLive) {
	application.firebase.current = application.firebase.live;
	application.mailingDomain.current = application.mailingDomain.live;
} else {
	application.firebase.current = application.firebase.local;
	application.mailingDomain.current = application.mailingDomain.local;
}

application.config(function ($provide, $mdThemingProvider) {
	$mdThemingProvider.alwaysWatchTheme(true);
	$provide.value('$mdThemingProvider', $mdThemingProvider);
});

var printString = function(value) {
	console.log(JSON.stringify(value));
}
application.constants = {
	tabs: [{
		id: 'home',
		name:'Home',
		title: 'Amaze Creationz | Home',
		icon: 'home',
		state: 'home',
		p: application.permissions.VISITOR
	},{
		id: 'apps',
		name:'Applications',
		title: 'Amaze Creationz | Applications',
		icon: 'apps',
		state: 'apps',
		stateParams: {type: null},
		p: application.permissions.VISITOR
	},{
		id: 'profile',
		name:'Profile',
		title: 'Amaze Creationz | Profile',
		icon: 'face',
		state: 'profile',
		p: application.permissions.USER
	},{
		id: 'console',
		name:'Console',
		title: 'Amaze Creationz | Console',
		icon: 'computer',
		state: 'console',
		p: application.permissions.MANAGER
	},/*{
		id: 'settings',
		name:'Site Settings',
		title: 'Amaze Creationz | Site Settings',
		icon: 'settings',
		state: 'settings',
		p: application.permissions.USER
	},*/{
		id: 'about',
		name:'About',
		title: 'Amaze Creationz | About Us',
		icon: 'info_outline',
		state: 'about',
		p: application.permissions.VISITOR
	},{
		id: 'contact',
		name:'Get In Touch',
		title: 'Amaze Creationz | Get In Touch',
		icon: 'contacts',
		state: 'contact',
		p: application.permissions.VISITOR
	}],
	team: {
		levels: [{
			id: 'level0',
			name: 'Level 0',
			value: 0
		},{
			id: 'l1',
			name: 'Level 1',
			value: 1
		},{
			id: 'l2',
			name: 'Level 2',
			value: 2
		},{
			id: 'l3',
			name: 'Level 3',
			value: 3
		},{
			id: 'l4',
			name: 'Level 4',
			value: 4
		}],
		types: [{
			id: 'EMPLOYEE',
			name: 'Employee'
		},{
			id: 'CONTRIBUTOR',
			name: 'Contributor'
		}]
	},
	apps: [{
		priority: 2,
		id: 'GPACalculator',
		icon: 'school',
		name: 'GPA Calculator',
		description: 'Calculates GPA of NITC students from Gradecard PDF.',
		page: 'gpa-calculator.html',
		showPage: true,
		background: 'nitc.jpg',
		links: {
			facebook: 'https://www.facebook.com/GPACalculator',
			github: 'https://github.com/amazecreationz/GPACalculator',
			playstore: 'https://play.google.com/store/apps/details?id=com.kkroo.dheeraj.nitcgpa&utm_source=global_co&utm_medium=prtnr&utm_content=Mar2515&utm_campaign=PartBadge&pcampaignid=MKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1'
		},
		development: {
			git: 'GPACalculator',
			contributors: ['anandmoghan', 'dheerajma007']
		}
	},{
		priority: 1,
		id: 'EmployeeMeter',
		icon: 'supervisor_account',
		name: 'Employee Meter',
		description: 'Monitor your personal employee\'s attendance and payments from anywhere.',
		page: 'employee-meter.html',
		showPage: true,
		dev: 'BETA',
		links: {
			github: 'https://github.com/amazecreationz/EmployeeMeter'
		},
		development: {
			git: 'EmployeeMeter',
			contributors: ['anandmoghan']
		}
	},{
		priority: 3,
		id: 'ASYNC',
		icon: 'cloud_done',
		name: 'Async',
		description: 'Hassle free sync of your files and media across all your connected devices.',
		page: 'async.html',
		showPage: true,
		dev: 'ALPHA',
		links: {
			github: 'https://github.com/amazecreationz/Async',
			playstore: 'https://play.google.com/store/apps/details?id=com.amazecreationz.async'
		},
		development: {
			git: 'Async',
			contributors: ['anandmoghan']
		}
	},{
		priority: 4,
		id: 'pDairy',
		icon: 'book',
		name: 'P-Dairy',
		description: 'Private and secure dairy at your finger-tips.',
		page: 'pDairy.html',
		showPage: false,
		development: {
			contributors: ['anandmoghan']
		},
		tags: [
			{
				title: 'Coming Soon',
				theme: 'cyan'
			}
		]
	}],
	query: {
		types: [{
			id: 'query',
			name: 'General Query'
		}, {
			id: 'support',
			name: 'Support'
		}, {
			id: 'feedback',
			name: 'Feedback'
		}]
	}
}
application.controller('AppController', ['$scope', '$rootScope', '$state', '$stateParams', 'AppService', 'FirebaseService', function($scope, $rootScope, $state, $stateParams, AppService, FirebaseService){
	$scope.globals = angular.copy(application.globals);
	$scope.globals.p = angular.copy(application.permissions);
	$scope.globals.social = AppService.getSocialLinks();
	$scope.showNotifications = false;

	AppService.initialise($scope.globals);

	$('.body-container').click(function() {
		$scope.showNotifications = false;
		_.defer(function(){$scope.$apply();});
	});	

	$scope.appData = {
		tabs: angular.copy(application.constants.tabs),
		viewLoader: false,
		user: {
			p: $scope.globals.p.VISITOR
		}
	};
	
	var setTitle = function(title) {
		$('title').text(title);
	}

	$scope.mSize = function(mSize) {
		return AppService.mSize(mSize);
	}

	$scope.openSideMenu = function() {
		AppService.openSideMenu();
	}

	$scope.closeSideMenu = function() {
		AppService.closeSideMenu();
	}

	$scope.openTab = function(tab) {
		AppService.closeSideMenu();
		$scope.appData.current_tab = tab.id;
		$state.go(tab.state, tab.stateParams , {reload: true});
	}

	$scope.showLogin = function(){
        AppService.customLogin();
    }

	$scope.login = function() {
		AppService.login();
    }

    $scope.customLogin = function() {
    	AppService.customLogin();
    }

	$scope.signOut = function() {
		AppService.logout();
	}

	$scope.openSettings = function() {
		$state.go('settings');
	}

	$scope.showNotificationsPopup = function(value) {
		AppService.hideToast();
		$scope.showNotifications = value ? true : !$scope.showNotifications;
	}

	$scope.dismissNotifications = function() {
		FirebaseService.dismissNotifications($scope.appData.user.uid, $scope.notifications);
	}

	AppService.loadStyle('font-awesome.min.css', true).then(function() {
		$scope.appData.loaded = {
			fontAwesome: true
		}		
	})

	firebase.messaging().onMessage(AppService.onNotification);
	
	firebase.auth().onAuthStateChanged(function(user) {
    	if(user){
    		FirebaseService.fetchUserInfo(user, function(userInfo) {
    			$scope.appData.user = userInfo;
    			if(userInfo.t) {
    				$scope.globals.theme = userInfo.t;
    				AppService.setMaterialTheme(userInfo.t);
    			}
				AppService.backgroundLoader(false);
				AppService.showToast('Signed in as '+$scope.appData.user.n);
				_.defer(function(){$scope.$apply();});
    		})

			FirebaseService.getNewNotifications(user.uid, function(data) {
				$scope.notifications = _.filter(data, function(notification, nid) {
					notification.nid = nid;
		    		return true;
		    	});
				_.defer(function(){$scope.$apply();});
			});
		} else {
			AppService.backgroundLoader(false);
			$scope.appData.user = {
				p: $scope.globals.p.VISITOR
			};
		}
    })

    $rootScope.$on('$stateChangeStart', function(e, toState, toParams, fromState, fromParams) {
    	if(toState.name != fromState.name) {
    		$scope.appData.viewLoader = true;
    	}
    });

    $scope.$on('$viewContentLoaded', function(event){
    	$scope.appData.viewLoader = false;
    });

   	$scope.$watch('appData.current_tab', function(newTab, oldTab) {	
		if(angular.isDefined(newTab) && newTab != oldTab) {
			var tab = _.find($scope.appData.tabs, function(tabData){
				return (tabData.id == newTab);
			})
			setTitle(tab.title);
		}
	})
}]);
application.config(['$stateProvider', '$urlRouterProvider', '$locationProvider', function($stateProvider, $urlRouterProvider, $locationProvider){

	$stateProvider.state('home', {
		url:'/',
		templateUrl: application.globals.html.views + 'home.html',
		controller: 'HomeController'
	});

	$stateProvider.state('login', {
		url:'/login?signup=&rP=&code=&redirect=',
		templateUrl: application.globals.html.views + 'login.html',
		controller: 'LoginController'
	});	

	$stateProvider.state('apps', {
		url:'/applications',
		templateUrl: application.globals.html.views + 'applications.html',
		controller: 'ApplicationsController'
	});

	$stateProvider.state('console', {
		url:'/console',
		templateUrl: application.globals.html.views + 'console.html',
		controller: 'ConsoleController'
	});

	$stateProvider.state('console.tab', {
		url:'/:tab?id=',
		templateUrl: application.globals.html.views + 'console-tabs.html',
		controller: 'ConsoleTabController',
		params: {
			action: null
		}
	});

	$stateProvider.state('profile', {
		url:'/profile?action=',
		templateUrl: application.globals.html.views + 'profile.html',
		controller: 'ProfileController'
	});

	$stateProvider.state('about', {
		url:'/about',
		templateUrl: application.globals.html.views + 'about.html',
		controller: 'AboutController'
	});

	$stateProvider.state('contact', {
		url:'/contact',
		templateUrl: application.globals.html.views + 'contact.html',
		controller: 'ContactController'
	});

	$stateProvider.state('settings', {
		url:'/settings',
		templateUrl: application.globals.html.views + 'settings.html',
		controller: 'SettingsController'
	});

	$stateProvider.state('error', {
		params: {
			url: undefined
		},
		templateUrl: application.globals.html.views + '404.html',
		controller: 'NotFoundController'
	});

	$stateProvider.state('view', {
		url:'/:type/:id?tab=&params=',
		templateUrl: function($stateParams, AppService) {
			var template = application.globals.html.views + 'include.html';
			switch($stateParams.type) {
				case 'application': 
					var appsInfo = angular.copy(application.constants.apps);
					var appInfo = _.find(appsInfo, function(appInfo) {
						return appInfo.id == $stateParams.id;
					})
					if(appInfo && appInfo.showPage && appInfo.page) {
						template = application.globals.html.views + appInfo.page;
					}
					break;
				case 'profile': 
					template = application.globals.html.views + 'team-profile.html';
					break;
			}
			return template;
		},
		controller: 'IncludeController'
	});

	$urlRouterProvider.when('/token', '/');

	$urlRouterProvider.otherwise(function($injector, $location) {
	    $injector.get('$state').go('error', {url: $location.path()});
	    return $location.path();
	});

	$locationProvider.hashPrefix('');
	$locationProvider.html5Mode(true);
}]);
application.service('AppService', function($state, $rootScope, $stateParams, $http, $location, $compile, $mdToast, $mdSidenav, $mdDialog, $mdTheming, $mdThemingProvider, $mdMedia, FirebaseService) {
	var AppService = this;

	this.initialise = function(globals) {
		AppService.setMaterialTheme(globals.theme);
	}

	this.backgroundLoader = function(showLoader) {
		var loader = $('.loader-shadow');
		if(showLoader) {
			loader.removeClass('hidden');
		} else {
			loader.addClass('hidden');
		}
	}

	this.loadScript = function(script, isLocal) {
		if(isLocal) {
			script = application.globals.scripts + script;
		}
		return $.getScript(script);
	}

	this.loadStyle = function(style, isLocal) {
		if(isLocal) {
			style = application.globals.styles + style;
		}
		var promise = $http.get(style);
		promise.then(function() {
			$('<link>', {rel:'stylesheet', type:'text/css', 'href':style}).appendTo('head');
		})
		return promise;
	}

	this.setMaterialTheme = function(theme) {
		theme = theme.toLowerCase();
	  	$mdThemingProvider.theme(theme).primaryPalette(theme, {
			'default': '700',
	      	'hue-1': '300',
	      	'hue-2': '600',
	      	'hue-3': '900'
		}).accentPalette(theme, {
			'default': '50',
			'hue-1': '50',
	      	'hue-2': '50',
	      	'hue-3': '50'
		});
		$mdThemingProvider.setDefaultTheme(theme);
		$mdTheming.generateTheme(theme);
	}

	this.getSocialLinks = function() {
		var social = angular.copy(application.globals.social);
		var socialLinks = {};
		angular.forEach(social, function(link, type) {
			socialLinks[type] = "https://www."+type+".com/"+link;
		})
		return socialLinks;
	}

	this.mSize = function(mSize) {
		return $mdMedia(mSize);
	}

	this.openSideMenu = function() {
		$mdSidenav('side-menu').open();
	}

	this.closeSideMenu = function() {
		$mdSidenav('side-menu').close();
	}

	this.showLogin = function() {
		this.openSideMenu();
	}

	this.openURLinNewTab = function(URL) {
		window.open(URL, '_blank');
	}

	this.scrollTo = function(scrollTop, scrollTime) {
		$('.main-container').animate({
		    scrollTop: scrollTop - 59 || 0
		 }, scrollTime || 800);
	}

	this.showToast = function(message, timeout) {
		$mdToast.show({
			hideDelay: timeout || 2000,
			position: 'top right',
			toastClass: 'toast',
			locals:{ 
				toastParams: {
					message: message
				}
			},
			controller: 'ToastController',
			templateUrl: '/modules/templates/toast.html',
			parent: document.getElementsByClassName('body-container')
        });
	}

	this.hideToast = function() {
		$mdToast.hide();
	}

	this.showNotification = function(message, timeout) {
		$mdToast.show({
			hideDelay: timeout || 5000,
			position: 'bottom right',
			toastClass: 'notification',
			locals:{ 
				notificationParams: message
			},
			controller: 'NotificationController',
			templateUrl: '/modules/templates/notification.html',
			parent: document.getElementsByClassName('body-container')
        });
	}

	this.onNotification = function(payload) {
		AppService.showNotification(payload.notification);
	}

	this.login = function() {
		AppService.closeSideMenu();
		AppService.backgroundLoader(true);
		var provider = new firebase.auth.GoogleAuthProvider();
		provider.addScope('https://www.googleapis.com/auth/userinfo.profile');
		firebase.auth().signInWithRedirect(provider).catch(function(error) {
			console.error(error)
			AppService.backgroundLoader(false);
			AppService.showToast(error.message);
		});
	}

	this.customLogin = function() {
		AppService.closeSideMenu();
		window.location.href = '/auth?redirect='+$location.url();
	}

	this.logout = function() {
		AppService.closeSideMenu();
		firebase.auth().signOut().then(function() {
			AppService.showToast('Signed out successfully');
		}, function(error) {
		});
	}

	this.reloadState = function() {
		$state.reload();
	}

	this.goToState = function(state, stateParams, reload, notify) {
		reload = reload || false;
		notify = angular.isDefined(notify) ? notify : true;
		stateParams = stateParams ? stateParams : {};
		$state.go(state, stateParams, {reload: reload, notify: notify});
	}

	this.goToURL = function(url) {
		if(url.includes('appLogin')) {
			window.location.href = url;
		} else {
			$location.url(url);
		}
	}

	this.goToApplicationPage = function(id) {
		$state.go('view', {type: 'application', id: id});
	}

	this.viewProfile = function(id) {
		$state.go('view', {type: 'profile', id: id, tab: null, params: null});
	}

	this.showNotFound = function() {
		$state.go('error', {url: $location.absUrl()});
	}

	this.getPermissionType = function(value) {
		var permissions = angular.copy(application.permissions);
		var permissionType;
		angular.forEach(permissions, function(permission, key) {
			if(value ==  permission) {
				permissionType = key;
			}
		})
		return permissionType;
	}

	this.openEditProfileModal = function(userInfo, action, theme, dismissCallback, cancelCallback) {
		$mdDialog.show({
			controller: 'EditProfileModalController',
			templateUrl: application.globals.html.views + 'modal-edit-profile.html',
			parent: angular.element(document.body),
			clickOutsideToClose:true,
			fullscreen: true,
			locals: {
				dialogParams: {
					userInfo: userInfo,
					action: action,
					theme: theme
				}
			}
		}).then(dismissCallback, cancelCallback);
	}

	this.openUserModal = function(userInfo, permission, dismissCallback, cancelCallback) {
		$mdDialog.show({
			controller: 'UserModalController',
			templateUrl: application.globals.html.views + 'modal-user.html',
			parent: angular.element(document.body),
			clickOutsideToClose:true,
			fullscreen: true,
			locals: {
				dialogParams: {
					userInfo: userInfo,
					permission: permission
				}
			}
		}).then(dismissCallback, cancelCallback);
	}

	this.openTeamModal = function(title, info, param, permission, dismissCallback, cancelCallback) {
		$mdDialog.show({
			controller: 'TeamModalController',
			templateUrl: application.globals.html.views + 'modal-team.html',
			parent: angular.element(document.body),
			clickOutsideToClose:true,
			fullscreen: true,
			size: 'lg',
			locals: {
				dialogParams: {
					title: title,
					info: info,
					param: param,
					permission: permission
				}
			}
		}).then(dismissCallback, cancelCallback);
	}

	this.openQueryModal = function(queryInfo, permission, state, stateParams) {
		$mdDialog.show({
			controller: 'QueryModalController',
			templateUrl: application.globals.html.views + 'modal-query.html',
			parent: angular.element(document.body),
			clickOutsideToClose:true,
			fullscreen: true,
			size: 'lg',
			locals: {
				dialogParams: {
					queryInfo: queryInfo,
					permission: permission
				}
			}
		}).then(function(dialogData) {
			AppService.goToState(state, stateParams, false, false);
		}, function() {
			AppService.goToState(state, stateParams, false, false);
		});
	}
});

application.service('FirebaseService', function($filter, FirebaseAPIService, MailingService) {
	var db = firebase.database().ref();
	var firestore = firebase.firestore();
	var storageRef = firebase.storage().ref();
	var usersRef = firestore.collection('USERS');
	var usersStorageRef = storageRef.child('USERS');
	var teamRef = firestore.collection('TEAM');
	var queryRef = firestore.collection('QUERY');
	var appDataRef = firestore.collection('APP_DATA');
	var serverQueueRef = db.child('SERVER_QUEUE')
	var notificationsRef = db.child('amazecreationz').child('notifications');
	var FirebaseService = this;

	this.getCurrentUserID = function() {
		return firebase.auth().currentUser.uid;
	}

	this.getCurrentUser = function() {
		return firebase.auth().currentUser;
	}

	this.getAppDataRef = function(userId, app) {
		return appDataRef.doc(userId).collection(app);
	}

	this.changeUserPicture = function(uid, image, callback) {
		usersStorageRef.child(uid).child('dp.jpg').put(image).then(function(snapshot) {
			var promises = [];
			promises.push(usersRef.doc(uid).update({
				pURL: snapshot.downloadURL
			}));
			promises.push(FirebaseService.getCurrentUser().updateProfile({
				photoURL: snapshot.downloadURL
			}));
			Promise.all(promises).then(function(data) {
				callback(snapshot.downloadURL);
			})
		}).catch(function(error) {
			callback(null);
		})
	}

	this.addToServerQueue = function(uid, app, content) {
		serverQueueRef.child(uid).child(app).set(content);
	}

	this.getNotificationAccess = function(userId) {
		firebase.messaging().requestPermission().then(function() {
		    FirebaseService.saveNotificationToken(userId);
		}).catch(function(error) {
		    console.error('Unable to get permission to notify.', error);
		});
	}

	this.saveNotificationToken = function(userId) {
		firebase.messaging().getToken().then(function(currentToken) {
			if (currentToken) {
				db.child('amazecreationz').child('notifications').child('tokens').child(userId).set(currentToken);
		    } else {
		      FirebaseService.getNotificationAccess(userId);
		    }
		}).catch(function(error) {
    		console.error('Unable to get messaging token.', error);
    	});
	}

	this.getAuthToken = function(callback) {
		firebase.auth().currentUser.getIdToken().then(function(token) {
			callback(token)
		});
	}

	this.sendEmailVerification = function(callback) {
		FirebaseService.getCurrentUser().sendEmailVerification().then(function() {
			callback({
				message: 'Verification mail sent.'
			})
		}).catch(function(error) {
			callback({
				message: 'Resend failed. Try again later.'
			})
		});
	}

	this.setUserInfo = function(user) {
		return usersRef.doc(user.uid).set(user);
	}

	this.fetchUserInfo = function(user, callback) {
		usersRef.doc(user.uid).get().then(function(doc) {
			var userInfo;
			if(!doc.exists) {
				userInfo = {
					n: user.displayName,
					e: user.email,
					pURL: user.photoURL  || application.globals.logo,
					p: application.permissions.USER
				}
				if(user.emailVerified) {
					userInfo.p = application.permissions.VERIFIED_USER;
					usersRef.doc(user.uid).set(userInfo);
				}
			} else {
				userInfo = doc.data();
				if(userInfo.p == application.permissions.USER && user.emailVerified) {
					userInfo.p = application.permissions.VERIFIED_USER;
					usersRef.doc(user.uid).update({p: application.permissions.VERIFIED_USER});
				}
			}
			userInfo.uid = user.uid;
			callback(userInfo);
		})
	}

	this.setTheme = function(userId, theme) {
		usersRef.doc(userId).update({t: theme});
	}

	this.sendNotification = function(userId, notification) {
		notificationsRef.child('content').child(userId).push(notification);
	}

	this.dismissNotifications = function(userId, notifications) {
		var updates = {};
		angular.forEach(notifications, function(notification) {
			var nid = notification.nid;
			updates[nid+'/read'] = true;
		})
		notificationsRef.child('content').child(userId).update(updates);
	}

	this.getNewNotifications = function(userId, callback) {
		notificationsRef.child('content').child(userId).orderByChild('read').equalTo(null).on('value', function(data) {
			callback(data.val());
		})
	}

	this.getNotifications = function(userId, callback) {
		notificationsRef.child('content').child(userId).on('value', function(data) {
			callback(data.val());
		})
	}

	this.setUserPermission = function(userId, permission) {
		usersRef.doc(userId).update({
			p: permission
		});
	}

	this.addFirebaseData = function(dataPoint, dataJSON, operation) {
		if(angular.isUndefined(operation)) {
			operation = 'set';
		}
		try {
			dataJSON = JSON.parse(dataJSON);
			if(operation == 'set') {
				db.child(dataPoint).set(dataJSON);
			} else {
				db.child(dataPoint).push(dataJSON);
			}
		} catch(e) {
			return e;
		}
		return null;	
	}

	this.getUserInfo = function(userId, callback) {
		usersRef.doc(userId).get().then(function(doc){
			if(!doc.empty) {
				var user = doc.data();
				user.uid = doc.id;
				callback(user);
			} else {
				callback(null);
			}
		});
	}

	this.getUserPromiseFromUID = function(uid) {
		return usersRef.doc(uid).get();
	}

	this.getUserFromUID = function(uid, callback) {
		FirebaseService.getUserPromiseFromUID(uid).then(function(user) {
			if(user.exists) {
				user = user.data();
				user.uid = uid;
				callback(user);
			} else {
				callback(null);
			}
		})
	}

	this.getAllUsers = function(callback) {
		usersRef.onSnapshot(function(data){
			var users = {};
			var user;
			data.forEach(function(doc) {
				user = doc.data();
				user.uid = doc.id;
				user.p = angular.isDefined(user.p) ? user.p : application.permissions.VERIFIED_USER;
				users[doc.id] = user;
			})
			callback(users);
		});
	}

	this.saveTeamInfo = function(uid, info) {
		if(info != null) {
			delete info.n;
			delete info.e;
			delete info.pURL;
			delete info.p;
			delete info.uid;
			delete info.t;
			delete info.c;
			delete info.$$hashKey;
		}
		var batch = firestore.batch();
		batch.set(teamRef.doc(uid), info);
		batch.update(usersRef.doc(uid), {team: info.type});
		batch.commit();
	}

	this.deleteTeamMember = function(uid) {
		var batch = firestore.batch();
		batch.delete(teamRef.doc(uid));
		batch.update(usersRef.doc(uid), {team: firebase.firestore.FieldValue.delete()});
		batch.commit();
	}

	this.getTeamPromiseFromURL = function(profileURL) {
		return teamRef.where('profileURL', '==', profileURL).get();
	}

	this.getTeamInfoFromURL = function(profileURL, callback) {
		FirebaseService.getTeamPromiseFromURL(profileURL).then(function(info) {
			if(!info.empty) {
				info = info.docs[0];
				var profile = info.data();
				FirebaseService.getUserFromUID(info.id, function(user) {
					if (user != null) {
						angular.extend(profile, user);
					}
					callback(profile);
				});
			} else {
				callback(null);
			}
		});
	}

	this.getTeamProfile = function(param, callback) {
		FirebaseService.getTeamInfoFromURL(param, callback);
	}

	this.getTeam = function(callback) {
		teamRef.onSnapshot(function(data) {
			if(!data.empty) {
				var list = {};
				var promises = [];
				data.forEach(function(doc) {
					list[doc.id] = doc.data();
					list[doc.id].uid = doc.id;
					promises.push(FirebaseService.getUserPromiseFromUID(doc.id));
				})
				Promise.all(promises).then(function(users) {
					users.forEach(function(user) {
						if(user.exists) {
							angular.extend(list[user.id], user.data());
						}
					});
					callback(list);
				})
			} else {
				callback(null);
			}
		});
	}

	this.getContributor = function(profileURL, callback) {
		FirebaseService.getTeamInfoFromURL(profileURL, function(info) {
			callback(null, info);
		})
	}

	this.getContributors = function(contributors, callback) {
		var promises = [];
		contributors.forEach(function(contributor) {
			promises.push(FirebaseService.getTeamPromiseFromURL(contributor));
		})

		var contributorsList = {};
		Promise.all(promises).then(function(data) {
			promises = [];
			data.forEach(function(contributor) {
				if(!contributor.empty) {
					contributor = contributor.docs[0];
					contributorsList[contributor.id] = contributor.data();
					promises.push(FirebaseService.getUserPromiseFromUID(contributor.id));
				}
			});
			Promise.all(promises).then(function(users) {
				users.forEach(function(user) {
					if(user.exists) {
						angular.extend(contributorsList[user.id], user.data());
					}
				})
				callback(contributorsList);
			})
		})
		callback(null)
	}

	this.addQuery = function(query, callback) {
		var result = {
			message: "Failed to send query. Try again later."
		}
		query.a = false;
		queryRef.add(query).then(function(error) {
			result = {
				status: 1,
				message: "Query sent!"
			}
			callback(result);
		}, function(error) {
			callback(result);
		})
	}

	this.setQueryAttended = function(queryId) {
		db.child('amazecreationz').child('query').child(queryId).child('attended').set(true);
	}

	this.getQuery = function(queryId, callback) {
		queryRef.doc(queryId).get().then(function(query) {
			if(query.empty) {
				callback(null);
			} else {
				callback(query.data());
			}
		})
	}

	this.deleteQuery = function(queryId) {
		queryRef.doc(queryId).delete();
	} 

	this.getAllQuery = function(callback) {
		queryRef.onSnapshot(function(queries) {
			if(queries.empty) {
				callback(null);
			} else {
				callback(queries.data())
			}
		}, function(error) {
			callback(null);
		})
	}

	this.getAttendedQueries = function(callback) {
		queryRef.where('a', '==', true).onSnapshot(function(queries) {
			if(queries.empty) {
				callback(null);
			} else {
				var queryList = [];
				queries = queries.docs;
				queries.forEach(function(query) {
					if(query.exists) {
						var queryId = query.id;
						query = query.data();
						query.id = queryId;
						queryList.push(query);
					}
				})
				callback(queryList)
			}
		}, function(error) {
			callback(null);
		})
	}

	this.getUnAttendedQueries = function(callback) {
		queryRef.where('a', '==', false).onSnapshot(function(queries) {
			if(queries.empty) {
				callback(null);
			} else {
				var queryList = {};
				queries = queries.docs;
				queries.forEach(function(query) {
					if(query.exists) {
						queryList[query.id] = query.data();
						queryList[query.id].id = query.id;
					}
				})
				callback(queryList)
			}
		}, function(error) {
			callback(null);
		})
	}

	this.setQueryReply = function(query) {
		queryRef.doc(query.id).set(query);
	}

	this.sendQueryReply = function(query, callback) {
		var date = new Date().getTime();
		var userId = query.uid;
		query.replyDate = date;
		query.attended = true;
		delete query.$$hashKey;
		if(query.uid) {
			var notification = {
				type: 'query',
				id: query.id,
				title: 'Reply for your query - '+ query.content,
				message: query.reply,
				date: date
			}
			FirebaseService.sendNotification(userId, notification);
		}
		FirebaseService.getAuthToken(function(token) {
			var params = {
				content: JSON.stringify({
					email: query.email,
					date: query.date,
					subject: "Query on "+$filter('date')(query.date, application.globals.dateFormat),
					body: "Query: "+query.content+"<br>Response: "+query.reply
				})
			}
			MailingService.getWithAuth('/sendReply', token, params).then(function(data) {
				FirebaseService.setQueryReply(query);
				callback(data.data);
			})
		})		
	}
})

application.service('FirebaseAPIService', function($http) {
	var APIDomain = angular.copy(application.firebase.current.functionsDomain);
	var FirebaseAPIService = this;

	this.getAPIWithParams = function(API, params) {
		var paramsURL = '?';
		angular.forEach(params, function(value, key) {
			paramsURL += key+'='+value+'&';
		})
		paramsURL = paramsURL.substring(0, paramsURL.length - 1);
		return API + paramsURL;
	}

	this.get = function(API) {
		var APIUrl = APIDomain + API;
		return $http({
			method: 'GET',
            url: APIUrl,
            cache: false
        });
	}

	this.getWithAuth = function(API, authToken, params) {
		if(angular.isUndefined(params)) {
			params = {};
		}
		params.authToken = authToken;
		API = FirebaseAPIService.getAPIWithParams(API, params);
		return FirebaseAPIService.get(API);
	}
})

application.service('MailingService', function($http) {
	var APIDomain = angular.copy(application.mailingDomain.current);
	var MailingService = this;

	this.getAPIWithParams = function(API, params) {
		var paramsURL = '?';
		angular.forEach(params, function(value, key) {
			paramsURL += key+'='+value+'&';
		})
		paramsURL = paramsURL.substring(0, paramsURL.length - 1);
		return API + paramsURL;
	}

	this.get = function(API) {
		var APIUrl = APIDomain + API;
		return $http({
			method: 'GET',
            url: APIUrl,
            cache: false
        });
	}

	this.getWithAuth = function(API, authToken, params) {
		if(angular.isUndefined(params)) {
			params = {};
		}
		params.authToken = authToken;
		API = MailingService.getAPIWithParams(API, params);
		return MailingService.get(API);
	}
})

application.service('JavaServerService', function($http) {
	var APIDomain = angular.copy(application.javaServerDomain.current);
	var JavaServerService = this;

	this.getAPIWithParams = function(API, params) {
		var paramsURL = '?';
		angular.forEach(params, function(value, key) {
			paramsURL += key+'='+value+'&';
		})
		paramsURL = paramsURL.substring(0, paramsURL.length - 1);
		return API + paramsURL;
	}

	this.get = function(API) {
		var APIUrl = APIDomain + API;
		return $http({
			method: 'GET',
            url: APIUrl,
            cache: false
        });
	}

	this.getWithAuth = function(API, authToken, params) {
		if(angular.isUndefined(params)) {
			params = {};
		}
		params.authToken = authToken;
		API = MailingService.getAPIWithParams(API, params);
		return MailingService.get(API);
	}
})

application.service('GitHubService', function($http) {
	var baseURL = 'https://api.github.com/repos/' +application.globals.developments.github+'/';
	var GitHubService = this;

	this.getCommits = function(repo, limitTo, callback) {
		if(limitTo == null) {
			limitTo = 5;
		}
		var apiURL = baseURL + repo + '/commits?per_page='+limitTo;
		$http({
			method: 'GET',
			url: apiURL,
			cache: true
		}).then(function(data) {
			var commits = [];
			angular.forEach(data.data, function(commitData) {
				var commitInfo = {
					message: commitData.commit.message,
					committer: commitData.commit.committer.name,
					url: commitData.html_url,
					date: commitData.commit.committer.date
				}
				commits.push(commitInfo);
			})
			callback(commits)
		}, function(error) {
			callback(null)
		})
	}

	this.getUserInfo = function(URL, callback) {
		$http({
			method: 'GET',
			url: URL,
			cache: true
		}).then(function(data) {
			var info = {
				name: data.data.name,
				email: data.data.email,
				image: data.data.avatar_url,
				followers: data.data.followers,
				url: data.data.html_url
			}
			callback(null, info);
		}, function(error) {
			callback(null, null)
		})
	}

	this.getContributors = function(repo, callback) {
		var apiURL = baseURL + repo + '/contributors';
		$http({
			method: 'GET',
			url: apiURL,
			cache: true
		}).then(function(data) {
			var contributors = [];
			angular.forEach(data.data, function(contributor) {
				contributors.push(contributor.url);
			})
			async.map(contributors, GitHubService.getUserInfo, function(errors, contributorsList) {
				callback(contributorsList);
			})
		}, function(error) {
			callback(null)
		})
	}
})
application.controller('ToastController', ['$scope', '$mdToast', 'toastParams', function($scope, $mdToast, toastParams) {
	$scope.toast = toastParams;

	$scope.closeToast = function() {
		$mdToast.hide();
	}
}]);

application.controller('NotificationController', ['$scope', '$mdToast', 'notificationParams', function($scope, $mdToast, notificationParams) {
	$scope.notification = notificationParams;

	$scope.closeToast = function() {
		$mdToast.hide();
	}
}]);

application.controller('HomeController', ['$scope', 'AppService', function($scope, AppService) {
	$scope.appData.current_tab = 'home';
	$scope.appData.bgImage = 'laptop.jpg';
	$scope.appsInfo = angular.copy(application.constants.apps);

	$scope.goToApplicationPage = function(id) {
		AppService.goToApplicationPage(id);
	}
}]);

application.controller('ApplicationsController', ['$scope', 'AppService', function($scope,AppService) {
	$scope.appData.current_tab = 'apps';
	$scope.appsInfo = angular.copy(application.constants.apps);

	$scope.goToApplicationPage = function(id) {
		AppService.goToApplicationPage(id);
	}
}]);

application.controller('ConsoleController', ['$scope', '$state', 'AppService', function($scope, $state, AppService) {
	$scope.appData.current_tab = 'console';

	$scope.console = {
		tabs: [{
			id: 'users',
			name: 'Users',
		},{
			id: 'team',
			name: 'Team'
		},{
			id: 'query',
			name: 'Query'
		}/*,{
			id: 'firebase',
			name: 'Firebase'
		}*/]
	};

	var tabState = 'console.tab';
	var tabId =  $state.params.tab;
	var params = $state.params.id;
	$scope.console.currentTab = 'users';

	var setTabState = function(tabId) {
		AppService.goToState(tabState, {tab: tabId, id:  null});
	}

	if(angular.isUndefined(tabId)) {
		tabId = $scope.console.currentTab;
		setTabState(tabId);
	}

	$scope.console.onTabSelect = function(tab) {
		$scope.console.currentTab = tab.id;
		setTabState(tab.id)
	}

	$scope.grantAdminPrevilages = function() {
		$scope.appData.user.p = $scope.globals.p.ADMIN;
	}
}]);

application.controller('ConsoleTabController', ['$scope', '$state', '$rootScope', '$mdDialog', 'AppService', 'FirebaseService', 'FirebaseAPIService', function($scope, $state, $rootScope, $mdDialog, AppService, FirebaseService, FirebaseAPIService){
	var currentState = $state.current.name;
	var tabId =  $state.params.tab;
	var params = $state.params.id;
	var action = $state.params.action;

	$scope.console.currentTab = tabId;

	var userModalDismissCallback = function(data) {
		AppService.goToState(currentState, {id: null}, false, false);
	}

	var userModalCancelCallback = function(data) {
		if(data == 'ADD_TEAM') {
			AppService.goToState(currentState, {tab: 'team', action: data}, false, true);
		} else {
			AppService.goToState(currentState, {id: null}, false, false);
		}
	}

	var teamModalDismissCallback = function(data) {
		if(data.info != null) {
			FirebaseService.saveTeamInfo(data.uid, data.info);
		} else {
			FirebaseService.deleteTeamMember(data.uid);
		}
		AppService.goToState(currentState, {id: null}, false, false);
	}

	var teamModalCancelCallback = function(data) {
		AppService.goToState(currentState, {id: null}, false, false);
	}

	var setParams = function(param) {
		AppService.goToState(currentState, {id: param}, false, false);
	}

	var openUserModal = function(userInfo) {
		AppService.openUserModal(userInfo, $scope.appData.user.p, userModalDismissCallback, userModalCancelCallback);
	}

	var openTeamModal = function(title, info, param) {
		AppService.openTeamModal(title, info, param, $scope.appData.user.p, teamModalDismissCallback, teamModalCancelCallback);
	}

	var openQueryModal = function(queryInfo) {
		AppService.openQueryModal(queryInfo, $scope.appData.user.p, currentState, {tab: tabId, id: null})
	}

	var setUsersTabData = function() {
		if(params) {
			try{
				FirebaseService.getUserInfo(params, function(userInfo) {
					if(userInfo == null) {
						AppService.showNotFound();
					}
					openUserModal(userInfo);
				})
				
			} catch(e) {
				AppService.goToState(currentState, {tab: tabId, id:  null});
			}
		}

		FirebaseService.getAllUsers(function(users) {
			$scope.console.admins = _.filter(users, function(user, userId) {
	    		return user.p == $scope.globals.p.ADMIN;
	    	});

	    	$scope.console.managers = _.filter(users, function(user, userId) {
	    		return user.p == $scope.globals.p.MANAGER;
	    	});

	    	$scope.console.bloggers = _.filter(users, function(user, userId) {
	    		return user.p == $scope.globals.p.BLOGGER;
	    	});

	    	$scope.console.users = _.filter(users, function(user, userId) {
	    		return user.p == $scope.globals.p.VERIFIED_USER;
	    	});
	    	_.defer(function(){$scope.$apply();});
		});
	}

	var setTeamTabData = function() {
		if(params) {
			if(action == 'ADD_TEAM') {
				FirebaseService.getUserInfo(params, function(info) {
					if(info == null) {
						AppService.showNotFound();
					} else {
						openTeamModal(info.n, info, true);
					}
				});
			} else {
				try{
					FirebaseService.getTeamInfoFromURL(params, function(info){
						if(info == null) {
							AppService.showNotFound();
						} else {
							openTeamModal(info.n, info, false);
						}
					});
				} catch(e) {
					AppService.goToState(currentState, {tab: tabId, id:  null});
				}
			}
		}
		
		FirebaseService.getTeam(function(users) {
			$scope.console.eT = _.filter(users, function(user, userId) {
	    		return user.type == 'EMPLOYEE';
	    	});
	    	$scope.console.cT = _.filter(users, function(user, userId) {
	    		return user.type == 'CONTRIBUTOR';
	    	});
			_.defer(function(){$scope.$apply();});
		});
	}

	var setQueryTabData = function() {
		if(params) {
			try{
				FirebaseService.getQuery(params, function(queryInfo){
					if(queryInfo == null) {
						AppService.showNotFound();
					}
					openQueryModal(queryInfo);
				})
			} catch(e) {
				AppService.goToState(currentState, {tab: tabId, id:  null});
			}
		}
		FirebaseService.getUnAttendedQueries(function(queries) {
			$scope.console.userQuery = _.filter(queries, function(query) {
				return query.uid;
			});
			$scope.console.visitorQuery = _.filter(queries, function(query) {
				return !query.uid;
			});
			_.defer(function(){$scope.$apply();});
		})

		FirebaseService.getAttendedQueries(function(queries) {
			$scope.console.attendedQuery = queries;
			_.defer(function(){$scope.$apply();});
		})
	}

	var setFirebaseTabData = function() {
		$scope.console.firebase = {
			operation: 'set'
		};
	}

	$scope.onUserSelect = function(userInfo) {
		openUserModal(userInfo)
		setParams(userInfo.uid);
	}

	$scope.onTeamSelect = function(info) {
		openTeamModal(info.n, info);
		setParams(info.profileURL);
	};

	$scope.onQuerySelect = function(queryInfo) {
		openQueryModal(queryInfo);
		setParams(queryInfo.id);
	}

	$scope.deleteQuery = function(queryId) {
		FirebaseService.deleteQuery(queryId);
	}

	$scope.onFirebaseSave = function() {
		var error = FirebaseService.addFirebaseData($scope.console.firebase.dataPoint, $scope.console.firebase.dataJSON, $scope.console.firebase.operation);
		if(error == null) {
			setFirebaseTabData();
		} else {
			window.alert(error);
		}
	}

	$rootScope.$on('$stateChangeStart', function() {
    	$mdDialog.cancel();
    });

	$scope.$watch('appData.user', function(user) {
		if(angular.isDefined(user.uid)) {
			switch(tabId) {
				case 'users': setUsersTabData();
					break;
				case 'team': setTeamTabData();
					break;
				case 'query': setQueryTabData();
					break;
				case 'firebase': setFirebaseTabData();
					break;
				default: AppService.showNotFound();
			}
		}
	})
}]);

application.controller('ProfileController', ['$scope', '$state', 'AppService', 'FirebaseService', function($scope, $state, AppService, FirebaseService){
	$scope.appData.current_tab = 'profile';
	$scope.availableThemes = {"red":"#D32F2F","pink":"#C2185B","purple":"#7B1FA2","deep-purple":"#512DA8","indigo":"#303F9F","blue":"#1976D2","light-blue":"#0288D1","cyan":"#0097A7","teal":"#00796B","green":"#388E3C","light-green":"#689F38","lime":"#AFB42B","yellow":"#FBC02D","amber":"#FFA000","orange":"#F57C00","deep-orange":"#E64A19","brown":"#5D4037","grey":"#616161","blue-grey":"#455A64"};
	var currentState = $state.current.name;
	var action = $state.params.action;

	var modalDismissCallback = function(data) {

	}

	var modalCancelCallback = function(pURL) {
		AppService.goToState(currentState, {action: null}, false, false);
		if (pURL != null) {
			$scope.appData.user.pURL = pURL
			_.defer(function(){$scope.$apply();});
		}
	}

	var openEditProfileModal = function(userInfo, action) {
		AppService.openEditProfileModal(userInfo, action, $scope.globals.theme, modalDismissCallback, modalCancelCallback);
	}
	
	$scope.onThemeChange = function(theme) {
		$scope.globals.theme = theme;
		AppService.setMaterialTheme(theme);
		if(angular.isDefined($scope.appData.user.uid)) {
			FirebaseService.setTheme($scope.appData.user.uid, theme);
		}
	}

	$scope.getPermissionLabel = function(permission) {
		return AppService.getPermissionType(permission);
	}

	$scope.resendMail = function() {
		FirebaseService.sendEmailVerification(function(data) {
			AppService.showToast(data.message);
		})	
	}

	$scope.$watch('globals.theme', function(theme) {
		$scope.selectedTheme = theme;
	});

	$scope.$watch('appData.user', function(user) {
		if(angular.isDefined(user.uid)) {
			if(action) {
				openEditProfileModal(user, action);
			}

			$scope.changePicture = function() {
				AppService.goToState(currentState, {action: 'CHANGE_PICTURE'}, false, false);
				openEditProfileModal(user, 'CHANGE_PICTURE');
			}
			
			$scope.editProfile = function() {
				AppService.goToState(currentState, {action: 'EDIT_PROFILE'}, false, false);
				openEditProfileModal(user, 'EDIT_PROFILE');
			}
		}
	});
}]);

application.controller('AboutController', ['$scope', 'AppService', 'FirebaseService', function($scope, AppService, FirebaseService){
	$scope.appData.current_tab = 'about';
	$scope.infoList = {};

	FirebaseService.getTeam(function(users) {
		$scope.infoList.e = _.filter(users, function(user, userId) {
    		return user.type == 'EMPLOYEE';
    	});
    	$scope.infoList.c = _.filter(users, function(user, userId) {
    		return user.type == 'CONTRIBUTOR';
    	});
		_.defer(function(){$scope.$apply();});
	});
}]);

application.controller('ContactController', ['$scope', 'AppService', 'FirebaseService', function($scope, AppService, FirebaseService) {
	$scope.appData.current_tab = 'contact';
	$scope.contacts = angular.copy(application.globals.contact);
	$scope.showForm = false;
	$scope.contacts.social = AppService.getSocialLinks();

	$scope.$watch('appData.user', function(user) {
		$scope.query = {};
		if(angular.isDefined(user.uid)) {
			$scope.query.n = user.n;
			$scope.query.e = user.e;
			$scope.query.uid = user.uid;
		}
		$scope.showForm = true;

		$scope.submitQuery = function() {
			$scope.query.d = new Date().getTime();
			FirebaseService.addQuery($scope.query, function(data) {
				AppService.showToast(data.message);
				if(data.status) {
					delete $scope.query.c;
					AppService.reloadState();
				}
			});		
		}
	})
}]);

application.controller('SettingsController', ['$scope', 'AppService', 'FirebaseService', function($scope, AppService, FirebaseService) {
	$scope.appData.current_tab = 'settings';

	$scope.availableThemes = {"red":"#D32F2F","pink":"#C2185B","purple":"#7B1FA2","deep-purple":"#512DA8","indigo":"#303F9F","blue":"#1976D2","light-blue":"#0288D1","cyan":"#0097A7","teal":"#00796B","green":"#388E3C","light-green":"#689F38","lime":"#AFB42B","yellow":"#FBC02D","amber":"#FFA000","orange":"#F57C00","deep-orange":"#E64A19","brown":"#5D4037","grey":"#616161","blue-grey":"#455A64"};

	$scope.onThemeChange = function(theme) {
		$scope.globals.theme = theme;
		AppService.setMaterialTheme(theme);
		if(angular.isDefined($scope.appData.user.uid)) {
			FirebaseService.setTheme($scope.appData.user.uid, theme);
		}
	}

	$scope.$watch('globals.theme', function(theme) {
		$scope.selectedTheme = theme;
	})
}]);

application.controller('IncludeController', ['$scope', '$state', '$stateParams', 'AppService', 'FirebaseService', 'GitHubService', function($scope, $state, $stateParams, AppService, FirebaseService, GitHubService){
	var type = $stateParams.type;
	var id = $stateParams.id;

	var goToApplication = function(id) {
		var appsInfo = angular.copy(application.constants.apps);
		var appInfo = _.find(appsInfo, function(appInfo) {
			return appInfo.id == id;
		})

		if(!appInfo || !appInfo.showPage || !appInfo.page) {
			AppService.showNotFound();
			return;
		}

		$scope.appInfo = appInfo;
		if(angular.isDefined(appInfo.development)) {
			if(angular.isDefined(appInfo.development.contributors)) {
				FirebaseService.getContributors(appInfo.development.contributors, function(data) {
					$scope.appInfo.contributorsList = data;
					_.defer(function(){$scope.$apply();});
				})
			}

			if(angular.isDefined(appInfo.development.git)) {
				GitHubService.getCommits(appInfo.development.git, 6, function(data) {
					$scope.appInfo.gitCommits = data;
					_.defer(function(){$scope.$apply();});
				})
			}
		}
	}

	var showTeamMemberProfile = function(profileURL) {
		FirebaseService.getTeamProfile(profileURL, function(profile) {
			if(profile == null) {
				AppService.showNotFound();
			}
			$scope.profile = profile;
			_.defer(function(){$scope.$apply();});
		})
	}

	switch(type) {
		case 'application': 
			$scope.appData.current_tab = 'apps';
			goToApplication(id);
			break;
		case 'profile': 
			$scope.appData.current_tab = undefined;
			showTeamMemberProfile(id);
			break;
		default: AppService.showNotFound();
	}
}]);

application.controller('NotFoundController', ['$scope', '$stateParams', function($scope, $stateParams){
	$scope.url = $stateParams.url;
}]);
application.controller('EditProfileModalController', ['$scope', '$state', '$stateParams', 'dialogParams', '$mdDialog', 'AppService', 'FirebaseService', function($scope, $state, $stateParams, dialogParams, $mdDialog, AppService, FirebaseService){
	$scope.dialog = {
		action: dialogParams.action,
		theme: dialogParams.theme,
		userInfo: dialogParams.userInfo,
		loader: false,
		selectedImage : []
	}

	$scope.onImageSelect = function(image) {
		var reader = new FileReader();
		reader.onload = function(event) {
			$scope.imageSrc = event.target.result;
			$scope.$apply();
		}
		reader.readAsDataURL(image);
	}

	$scope.upload = function() {
		$scope.dialog.loader = true;
		FirebaseService.changeUserPicture(dialogParams.userInfo.uid, $scope.dialog.selectedImage, function(pURL) {
			$scope.dialog.loader = false;
			$mdDialog.cancel(pURL);
			$scope.$apply();
		})
	}

	$scope.cancel = function() {
		$mdDialog.cancel();
	};
}]);	

application.controller('UserModalController', ['$scope', '$state', '$stateParams', 'dialogParams', '$mdDialog', 'AppService', 'FirebaseService', function($scope, $state, $stateParams, dialogParams, $mdDialog, AppService, FirebaseService){
	$scope.dialog = {
		currentUser: dialogParams.userInfo.uid == FirebaseService.getCurrentUserID(),
		permission: dialogParams.permission,
		permissions: angular.copy(application.permissions)
	};

	$scope.userInfo = dialogParams.userInfo;
	delete $scope.dialog.permissions.VISITOR;
	delete $scope.dialog.permissions.USER;

	$scope.cancel = function() {
		$mdDialog.cancel();
	};

	$scope.setPermission = function() {
		FirebaseService.setUserPermission($scope.userInfo.uid, $scope.userInfo.p);
	}

	$scope.getPermissionLabel = function(permission) {
		return AppService.getPermissionType(permission);
	}

	$scope.addToTeam = function() {
		$mdDialog.cancel('ADD_TEAM');
	}
}]);

application.controller('TeamModalController', ['$scope', '$state', '$stateParams', '$mdDialog', 'dialogParams', 'FirebaseService', function($scope, $state, $stateParams, $mdDialog, dialogParams, FirebaseService){
	$scope.dialog = {
		levels: angular.copy(application.constants.team.levels),
		types: angular.copy(application.constants.team.types),
		permission: dialogParams.permission,
		permissions: angular.copy(application.permissions),
		title: dialogParams.title
	}

	$scope.setDefault = function(type) {
		if(type == 'EMPLOYEE') {
			$scope.info.l = 4;
			$scope.info.d = 'Developer';
		} else {
			delete $scope.info.l;
			delete $scope.info.d;
		}
		$scope.info.type = type;
	}

	$scope.delete = function() {
		var dialogData = {
			uid: $scope.userId,
			info: null
		}
		$mdDialog.hide(dialogData);
	}

	$scope.save = function() {
		var dialogData = {
			uid: $scope.userId,
			info: $scope.info
		}
		$mdDialog.hide(dialogData);
	}

	$scope.getTypeLabel = function(type) {
		return _.find($scope.dialog.types, function(item) {
			return item.id == type;
		}).name;
	}

	$scope.cancel = function() {
		$mdDialog.cancel();
	};	

	if(angular.isDefined(dialogParams.info)) {
		$scope.info = dialogParams.info;
		$scope.userId = dialogParams.info.uid;
	}

	if(dialogParams.param) {
		$scope.addToTeam = true;
		$scope.info.profileURL = $scope.info.uid;
		$scope.setDefault(angular.copy(application.constants.team.types[0].id))
	}
}]);

application.controller('QueryModalController', ['$scope', '$state', '$stateParams', 'dialogParams', '$mdDialog', 'AppService', 'FirebaseService', function($scope, $state, $stateParams, dialogParams, $mdDialog, AppService, FirebaseService){
	$scope.dialog = {
		permission: dialogParams.permission,
		permissions: angular.copy(application.permissions),
		dateFormat: angular.copy(application.globals.dateFormat)
	};

	$scope.query = dialogParams.queryInfo;
	$scope.showLoader = false;

	delete $scope.dialog.permissions.VISITOR;

	$scope.sendReply = function() {
		$scope.showLoader = true;
		FirebaseService.sendQueryReply($scope.query, function(data) {
			AppService.showToast(data.message);
			if(data.status) {
				$mdDialog.hide();
			}
			$scope.showLoader = false;
		})
	}

	$scope.cancel = function() {
		$mdDialog.cancel();
	};
}]);

application.controller('GPACalculatorController', ['$scope', '$state', '$http','AppService', 'FirebaseService', function($scope, $state, $http, AppService, FirebaseService){
	var params = $state.params.params;
	var id = $state.params.id;
	var tab = $state.params.tab;
	var currentState = $state.current.name;
	var dbRef = firebase.database().ref('appData/GPACalculator');
	var gradeCardStorageRef = firebase.storage().ref('appData/gradecards');

	var colors = angular.copy(application.colors);

	$scope.GPACalculator = {
		tabs: [{
			id: 'overview',
			name: 'Overview'
		}, {
			id: 'dashboard',
			name: 'Dashboard'
		}],
		currentTab: tab || 'overview',
		showUploadLoader: false,
		selectedFile: null
	};

	if(tab && _.findIndex($scope.GPACalculator.tabs, { id: tab }) == -1) {
		AppService.showNotFound();
	}

	var setTab = function(tabId) {
		AppService.goToState(currentState, {tab: tabId}, false, false);
	}

 
	var setSGPATextOnChart = function(chartData) {
		chartData.options.animation = {
			onComplete: function() {
				var chartInstance = this.chart;
				var ctx = chartInstance.ctx;
		        ctx.textAlign = "center";
		        ctx.textBaseline = "bottom";

		        this.data.datasets.forEach(function (dataset, i) {
		            var meta = chartInstance.controller.getDatasetMeta(i);
		            meta.data.forEach(function (bar, index) {
		                var data = dataset.data[index];                            
		                ctx.fillText(data, bar._model.x, bar._model.y - 5);
		            });
		        });
		    }
		}
		return chartData;
	}

	var getSGPAChartObject = function(semesterData) {
		var labels = [];
		var data = [];

		angular.forEach(semesterData, function(value, key) {
			labels.push(key.replace('_', ' '));
			data.push(value.SGPA.toFixed(2));
		})
		var dataLength = data.length;

		return {
			type: 'bar',
			data: {
				labels: labels,
				datasets: [{
					backgroundColor: colors.slice(0, dataLength),
					data: data
				}]
			},
			options: {
				responsive: true,
				legend: {
					display: false
				},
		        scales: {
		            yAxes: [{
		                ticks: {
		                    beginAtZero:true,
		                    suggestedMax: 10
		                }
		            }],
		            xAxes: [{
		                display: false
		            }]
		        }
		    }
		}	
	}

	var setStudentDataListener = function(dbRef) {
		dbRef.doc('SD').onSnapshot(function(doc) {
			if (doc.exists) {
				$scope.GPACalculator.studentData = doc.data();
				$scope.GPACalculator.semesterChartData = getSGPAChartObject(angular.copy($scope.GPACalculator.studentData).SEMESTERS);
			} else {
				$scope.GPACalculator.studentData = null;
				$scope.GPACalculator.semesterChartData = null;
			}
			$scope.showUploadLoader = false;
			$scope.GPACalculator.gradecard = null;
			$scope.GPACalculator.selectedFile = null;
			_.defer(function(){$scope.$apply();});
		})
	}

	$scope.GPACalculator.onGradeCardSelect = function(gradecard) {
		$scope.GPACalculator.gradecard = gradecard;
	}

	$scope.GPACalculator.uploadGradeCard = function() {
		if(angular.isDefined($scope.GPACalculator.gradecard) && angular.isDefined($scope.appData.user.uid)) {
			$scope.showUploadLoader = true;
			var userId = $scope.appData.user.uid;
			var fileName = userId+'.pdf';
			gradeCardStorageRef.child(fileName).put($scope.GPACalculator.gradecard).then(function(snapshot) {
				FirebaseService.addToServerQueue(userId, id, fileName);
			})
			_.defer(function(){$scope.$apply();});
		}
	}

	$scope.GPACalculator.onTabSelect = function(tab) {
		setTab(tab.id);
	}

	var chartPromise = AppService.loadScript('https://static.amazecreationz.in/latest/js/Chart.min.js');
	var chartBundlePromise = AppService.loadScript('https://static.amazecreationz.in/latest/js/Chart.bundle.min.js');
	Promise.all([chartPromise, chartBundlePromise]).then(function(values) {
		$scope.chartLoaded = true;
	});

	$scope.$watch('appData.user', function(user) {
		if(user.uid) {
			var dbRef = FirebaseService.getAppDataRef(user.uid, id);
			setStudentDataListener(dbRef);
		} else {
			$scope.GPACalculator.studentData = null;
			$scope.GPACalculator.semesterChartData = null;
		}
	})
}]);

application.controller('EmployeeMeterController', ['$scope', '$state', '$filter', 'AppService', 'FirebaseService', function($scope, $state, $filter, AppService, FirebaseService){
	var app = $state.params.id;
	var employeeId = $state.params.params;
	var tab = $state.params.tab;
	var currentState = $state.current.name;
	var today = new Date(new Date().setHours(0,0,0,0));
	var currentDate = today, currentKey, emRef, empLRef, empDRef, empSRef;

	$scope.eM = {
		tabs: [{
			id: 'overview',
			name: 'Overview'
		}, {
			id: 'dashboard',
			name: 'Dashboard'
		}],
		days: ["S", "M", "T", "W", "T", "F", "S"],
		currentTab: tab || 'overview',
		today: today,
		loadEmployee: true,
		showEmployeeForm: false,
		calLegends: {"Weekly Holidays":"bg-theme-lime", "Special Holidays":"bg-theme-yellow", "Absent":"bg-theme-red", "Payment":"bg-theme-grey"}  
	};

	if(tab) {
		if(_.findIndex($scope.eM.tabs, { id: tab }) == -1) {
			AppService.showNotFound();
		}
	}

	var setTab = function(tabId) {
		AppService.goToState(currentState, {tab: tabId, params: employeeId}, false, false);
	}

	var setEmployeeId = function(eId) {
		AppService.goToState(currentState, {params: eId}, false, false);
	}

	var addEmployee = function() {
		$scope.eM.loadEmployee = false;
		$scope.eM.showEmployeeForm = true;
		$scope.eM.employee = {
			image: $scope.globals.logo_square,
			type: 'Employee',
			wage: 100,
			cU: 'INR',
			jD: new Date(today),
			h: [0] /*Sunday as default holiday*/
		}
	}

	var setEmployeeData = function(eId) {
		$scope.eM.loadEmployee = true;
		$scope.eM.showEmployeeForm = false;
		empLRef.doc(eId).get().then(function(doc) {
			if(doc.exists) {
				$scope.eM.loadEmployee = false;
				$scope.eM.employee = doc.data();
				$scope.eM.employee.id = doc.id;
				_.defer(function(){$scope.$apply();});
			} else {
				AppService.showNotFound();
			}
		});
	}

	var setEmployeeList = function() {
		empLRef.onSnapshot(function(data) {
			$scope.eM.eList = {};
			if(!data.empty) {
				data.docs.forEach(function(doc) {
					$scope.eM.eList[doc.id] = doc.data();
				})
				if(!employeeId) {
					employeeId = _.keys($scope.eM.eList)[0];
					setEmployeeData(employeeId);
				}
			} else {
	    		addEmployee();
			}
			_.defer(function(){$scope.$apply();});
		});
	}

	$scope.eM.shuffleHoliday = function(h) {
		if(angular.isUndefined($scope.eM.employee.h)) {
			$scope.eM.employee.h = [];
		}
		var index = $scope.eM.employee.h.indexOf(h);
		if(index > -1) {
			$scope.eM.employee.h.splice(index, 1);
		} else {
			$scope.eM.employee.h.push(h);
		}
	}

	$scope.eM.eFunction = function(action, eId) {
		switch(action) {
			case 'delete': $scope.eM.loadEmployee = true;
				var batch = firebase.firestore().batch();
				batch.delete(empLRef.doc(eId));
				batch.delete(empDRef.doc(eId));
				batch.delete(empSRef.doc(eId));
				batch.commit().then(function() {
					addEmployee();
					setEmployeeId(null);
				})
				break;
			case 'add': addEmployee();
				setEmployeeId(null);
				break;
			case 'edit':$scope.eM.showEmployeeForm = true;
				break;
			case 'select': setEmployeeId(eId);
				setEmployeeData(eId);
				break;
			case 'save': $scope.eM.loadEmployee = true;
				var batch = firebase.firestore().batch();
				if(eId) {
					delete $scope.eM.employee.id;
				} else {
					eId = empLRef.doc().id;
					batch.set(empSRef.doc(eId), {
						fP: 0,
						tA: 0,
						tOH: 0
					});
				}
				batch.set(empLRef.doc(eId), $scope.eM.employee);
				batch.commit().then(function() {
					setEmployeeId(eId);
					setEmployeeData(eId);
				});
				break;
		}
	}

	$scope.eM.onTabSelect = function(tab) {
		setTab(tab.id);
	}

	$scope.$watch('appData.user', function(user) {
		if(user.uid) {
			emRef = FirebaseService.getAppDataRef(user.uid, app).doc('DATA');
			empLRef = emRef.collection('eL');
			empDRef = emRef.collection('eD');
			empSRef = emRef.collection('eS');
			setEmployeeList();
			if(employeeId) {
				setEmployeeData(employeeId);
			}
		} else {
			addEmployee();
		}
	})
}]);
application.directive("imageLoad", [function() {
    return {
        restrict: "A",
        scope: {
            location: '=',
            image: '='
        },
        link: function(scope, elements, attributes) {
            scope.$watch('image', function(image){
                var location = scope.location ? 'https://static.amazecreationz.in' + scope.location : '';
                var parent = $(elements[0]);
                var imgLoaded = false;
                if(location && !imgLoaded) {
                    var thumbs = new Image();
                    thumbs.src = location+'thumbs/'+image;
                    thumbs.onload = function() {
                        if(!imgLoaded) {
                            parent.css({'background-image':'url('+thumbs.src+')'});
                        }
                    }
                }
                var img = new Image();
                img.src = location+image;
                img.onload = function() {
                    imgLoaded = true;
                    parent.css({'background-image':'url('+img.src+')'});
                } 
            })
            
        }
    }
}]);

application.directive("fileSelect", [function () {
    return {
        scope: {
            onFileSelect: '=',
            selectedFile: '=',
            label: '=',
            hideName: '@',
            accept: '@'
        },
        template: '<md-button class="md-raised" ng-click="selectFile()">{{label}}</md-button><input id="file-select-input" type="file" name="file-select-input" accept="{{accept}}" style="display: none;"/><span ng-hide="hideName" class="pad10 text-16">{{selectedFile.name}}</span>',
        link: function (scope, elements, attributes) {
            var fileInput = $(elements[0]).find('#file-select-input');
            scope.label = scope.label || 'Choose File';

            
            fileInput.bind("change", function (changeEvent) {
                scope.$apply(function () {
                    scope.selectedFile = changeEvent.target.files[0];
                    scope.onFileSelect(scope.selectedFile);
                });
            });

            scope.selectFile = function() {
                fileInput.trigger('click');
            }
        }
    }
}]);

application.directive("pageScroll", [function() {
    return {
        restrict: "E",
        scope: {
            container: '=',
            animationTime: '='
        },
        link: function(scope, elements, attributes) {
            var containerElement = $(scope.container);
            var animationTime = scope.animationTime || 1000;
            var containerOffset = containerElement.position().top;
            var containerHeight = $(window).height() - containerOffset;
            var parentId = elements.attr('id') || 'page-scroll';
            var children = elements.children();
            var scrollTop = containerElement.scrollTop();
            var isScrolling = false;

            var getChildId = function(position) {
                return parentId +'-child-'+ position;
            }

            angular.forEach(children, function(child, index) {
                $(child).addClass('full-height');
                $(child).attr('id', getChildId(index));
            });

            var scrollTo = function(value) {
                isScrolling = true;
                containerElement.animate({
                    scrollTop: value
                }, animationTime, function() {
                    isScrolling = false;
                });
            }

            containerElement.scroll(function() {
                if(isScrolling) {
                    return;
                }
                var newScrollTop = containerElement.scrollTop();
                if(newScrollTop > scrollTop - 5 && newScrollTop < scrollTop + 5) {
                    return;
                }
                else if(newScrollTop > scrollTop) {
                    scrollTop += containerHeight;
                }
                else {
                    scrollTop -= containerHeight;
                }
                scrollTo(scrollTop);
            });

            $(window).resize(function() {
                containerOffset = containerElement.position().top;
                containerHeight = $(window).height() - containerOffset;
                scrollTop = Math.floor(scrollTop / containerHeight)  * containerHeight;
            })
        }
    }
}]);

application.directive("loader", ['$compile', function($compile) {
    return {
        restrict: "E",
        scope: {
            loader: '=',
        },
        template: '<div ng-if="loader" class="mrg20" layout="row" layout-align="space-around"><md-progress-circular class="md-primary" md-diameter="40"></md-progress-circular></div>',
        link: function(scope, elements, attributes) {}
    }
}]);

application.directive("pageHeader", [function() {
    return {
        restrict: "E",
        replace: true,
        scope: {
            theme: '=',
            backButton: '=',
            header: '@',
            tabs: '=',
            currentTab: '=',
            onTabSelect: '=',
            menuItems: '=',
            menuFunction: '='
        },
        //templateUrl: application.globals.html.templates + 'page-header.html',
        template: '<div class="page-header" ng-class="\'bg-theme-\'+theme"><div class="title" layout="row" layout-align="start center"><md-icon ng-if="backButton" class="material-icons text-size-d back" md-ink-ripple ng-click="goBack()">arrow_back</md-icon><div class="text-size-d" flex>{{header}}</div><div class="menu-container"></div></div><div ng-if="tabs |isEmpty : true" class="tabs"><div class="tab-item text-no-select" ng-repeat="tab in tabs" ng-class="{\'active\': currentTab==tab.id}" ng-click="changeTab(tab)">{{tab.name}}</div></div></div>',
        link: function(scope, elements, attributes) {
            if(scope.tabs && !scope.currentTab) {
                scope.currentTab = scope.tabs[0].id;
            }

            scope.goBack = function() {
                history.back();
            }
            
            scope.changeTab = function(tab) {
                scope.currentTab = tab.id;
                if(scope.onTabSelect) {
                    scope.onTabSelect(tab);
                }
            }
        }  
    }
}]);

application.directive("permissionCheck", ['$compile', 'AppService', function($compile, AppService) {
    return {
        restrict: "A",
        scope: {
            permissionCheck: '=',
            minPermission: '='
        },
        link: function(scope, elements, attributes) {
            var body = $(elements);
            var permissions = angular.copy(application.permissions);
            var minPermission = scope.minPermission;
            var bodyHtml = body.html();
            var emptyDiv = '<div></div>'
            var loginMessageHtml = '<span>You have to <span class="text-bold pointer" ng-click="showLogin()">login</span> to view this content.</span>'
            var permissionsMessageHtml = '<span>You don\'t have sufficient permissions to view this content. Contact Administrator.</span>'
            
            $(emptyDiv).insertAfter(body);
            var messageDiv = body.next();

            scope.showLogin = function(){
                AppService.customLogin();
            }

            scope.$watch('permissionCheck', function(permissionCheck){
                messageDiv.removeClass('hide');
                body.addClass('hide');

                var bodyContentHtml;
                
                if(permissionCheck == permissions.VISITOR && permissionCheck > minPermission) {
                    bodyContentHtml = loginMessageHtml;
                } else if(permissionCheck > minPermission) {
                    bodyContentHtml = permissionsMessageHtml;
                }
                else {
                    bodyContentHtml = null;
                    messageDiv.addClass('hide');
                    body.removeClass('hide');
                }
                
                messageDiv.html($compile(bodyContentHtml)(scope));
            })
        }
    }
}]);


application.directive("listLoader", ['$compile', function($compile) {
    return {
        restrict: "E",
        scope: {
            list: '=',
            listParam: '@',
            message: '='
        },
        template: '<div class="hide"></div>',
        link: function(scope, elements, attributes) {
            var messageHtml;
            var loaderHtml = '<loader flex="100" loader="showLoader"></loader>'
            var body = $(elements[0]);

            $($compile(loaderHtml)(scope)).insertAfter(body);
            scope.showLoader = true;

            if(scope.message){
                messageHtml = scope.message;
            } else {
                messageHtml = 'No '+scope.listParam+' Found.'
            }
            body.html(messageHtml)
            
            scope.$watch('list', function(list) {
                if(angular.isUndefined(list)) {
                    scope.showLoader = true;
                    body.addClass('hide')
                } 
                else if(_.isEmpty(list)) {
                    scope.showLoader = false;
                    body.removeClass('hide');
                }
                else {
                    scope.showLoader = false;
                    body.addClass('hide')
                }
            })
            
        }
    }
}]);

application.directive("overviewCalendar", [function() {
    return {
        restrict: "E",
        scope: {
            minDate: '=',
            maxDate: '=',
            selectedDate: '=',
            onDateSelect: '=',
            barsData: '=',
            theme: '='
        },
        templateUrl: application.globals.html.templates + 'overview-calendar.html',
        link: function(scope, elements, attributes) {
            scope.months = ["January","February","March","April","May","June","July","August","September","October","November","December"];
            scope.days = ["S", "M", "T", "W", "T", "F", "S"];

            var getDateFromDay = function(day) {
                return new Date(scope.selectedYear, scope.selectedMonth, day).getTime();
            }            

            var setMonthDates = function(month, year) {
                var startWeekDay = new Date(year, month, 1).getDay(),
                    lastDay =  new Date(year, month+1, 0).getDate();//month+1 gives proper result.

                scope.monthDates = Array(startWeekDay).fill(0);
                scope.validDates = [];

                for(var i=0; i<lastDay; i++) {
                    scope.monthDates.push(i+1);
                    scope.validDates.push(scope.isRange(i+1));
                }

                var zeroPad = 7 - scope.monthDates.length % 7;
                while(zeroPad>0) {
                    scope.monthDates.push(0);
                    zeroPad--;
                }
            }

            scope.onDatePickerChange = function(month, year) {
                var lastDay =  new Date(year, month+1, 0).getDate(),//month+1 gives proper result.
                    date = 1;

                while(!scope.isRange(date) && date <= lastDay+1) {
                    date ++;
                }
                scope.selectedDate = date <= lastDay ? new Date(year, month, date).getTime() : undefined;
            }

            scope.onDaySelect = function(day) {
                var date = getDateFromDay(day);
                scope.selectedDate = date;    
            }

            scope.isSelectedDate = function(day) {
                return scope.selectedDate == getDateFromDay(day);
            }

            

            scope.$watchGroup(['minDate', 'maxDate'], function(values) {
                var minDate = values[0],
                    maxDate = values[1],
                    minMonth = 0,
                    maxMonth = 12;

                if(angular.isDefined(minDate)) {
                    minMonth = new Date(minDate).getMonth();
                }

                if(angular.isDefined(maxDate)) {
                    maxMonth = new Date(maxDate).getMonth();
                }

                scope.isValidMonth = function(month) {
                    month = scope.months.indexOf(month);
                    return (month >= minMonth) && (month <= maxMonth);
                }

                scope.isRange = function(day) {
                    if(day == 0) {
                        return false;
                    }
                    var date = getDateFromDay(day);
                    var result = true;
                    result = result && (angular.isDefined(minDate) ? date >= minDate : true);
                    result = result && (angular.isDefined(maxDate) ? date <= maxDate : true);
                    return result;
                }

            })

            scope.$watch('selectedDate', function(sD) {
                if(angular.isDefined(sD)) {
                    scope.onDateSelect(sD);
                    sD = new Date(sD);
                    scope.selectedMonth = sD.getMonth();
                    scope.selectedYear = sD.getFullYear();
                    setMonthDates(scope.selectedMonth, scope.selectedYear);
                }   
            }) 
        }
    }
}])

application.directive("user", ['FirebaseService', function(FirebaseService) {
    return {
        restrict: "E",
        scope: {
            info: '=',
            userId: '=',
            onClick: '=',
            theme: '='
        },
        templateUrl: application.globals.html.templates + 'user.html',
        link: function(scope, elements, attributes) {
            if(scope.info) {
                scope.userData = scope.info;
            }
            else if(scope.userId) {
                FirebaseService.getUserInfo(scope.userId, function(info) {
                    scope.userData = info;
                });
            }
        }
    }
}]);

application.directive("teamMember", ['AppService', function(AppService) {
    return {
        restrict: "E",
        scope: {
            info: '=',
            onClick: '=',
            theme: '='
        },
        template: '<div ng-click="onTeamSelect(info)" style="padding: 10px 15px; cursor: pointer;" ng-class="{\'bg-light\': hover}" layout="row" layout-align="start center" ng-init="hover=false" ng-mouseenter="hover=true" ng-mouseleave="hover=false"><div style="width: 50px; height: 50px; background-size: 50px; border-radius: 50%; margin-right: 10px;" ng-class="\'bg-light-theme-\'+\'{{theme}}\'" image-load image="info.pURL"></div><div style="padding: 0 10px;" ><div style="font-size: 20px;">{{info.n}}</div><div style="margin-top: -5px; font-size: 14px;">{{info.e}}</div></div></div>',
        link: function(scope, elements, attributes) {
            scope.onTeamSelect = function(info) {
                AppService.viewProfile(info.profileURL);
            }

            if (angular.isDefined(scope.onClick)) {
                scope.onTeamSelect = scope.onClick;
            }
        }
    }
}]);

application.directive("gitCommit", ['AppService', function(AppService) {
    return {
        restrict: "E",
        scope: {
            commitInfo: '='
        },
        templateUrl: application.globals.html.templates + 'git-commit.html',
        link: function(scope, elements, attributes) {
            scope.dateFormat = angular.copy(application.globals.dateFormat);
            scope.viewCommit = function() {
                AppService.openURLinNewTab(scope.commitInfo.url);
            }
        }
    }
}]);

/*
widget: Tags
tagdata: Tags Info Object
*/
application.directive('tags', ['$state', function($state) {
    return {
        restrict:'E',
        scope: {
            tagData: '='
        },
        template: "<div layout='row'><div ng-repeat=\"tag in tagData | orderBy : 'priority' : true\" ng-class=\"'text-no-select bg-theme-'+tag.theme\" style='padding: 5px 10px; margin-right: 10px;'>{{tag.title}}</div></div>",
        link: function (scope, elements, attributes) {}
    }
}]);




/*
widget: Get from Play Store
link: playstore link
height: (optional) height of image - default height: 30px
*/
application.directive('googlePlay', [function() {
    return {
        restrict:'E',
        replace: true,
        scope: {
            link: '@',
            height: '@'
        },
        template: '<a href="{{link}}" target="_blank"><img alt="Get it on Google Play" ng-style="imgClass" src="https://static.amazecreationz.in/images/google-play-badge.png"/></a>',
        link: function (scope, elements, attributes) {
            if(angular.isUndefined(scope.height)){
                scope.imgClass={
                    'height': '30px',
                    'width': 'auto'
                };
            }
            else {
                scope.imgClass={
                    'height': scope.height,
                    'width': 'auto'
                };
            }
        }
    }
}]);

application.directive('chart', ['$state', function($state) {
    return {
        restrict:'E',
        scope: {
            chartData: '=',
            chartLoaded: '=',
            chartObject: '=?'
        },
        replace: true,
        template: '<canvas class="chart-container"></canvas>',
        link: function (scope, elements, attributes) {
            var chartLoaded;
            var chartData;
            var chartElement = elements[0].getContext('2d');
            scope.chartObject = null;
            scope.$watchGroup(['chartLoaded', 'chartData'], function(values) {
                chartLoaded = values[0];
                chartData = values[1];
                if(chartLoaded && chartData) {
                    if(scope.chartObject != null) {
                        scope.chartObject.destroy();
                    }
                    scope.chartObject = new Chart(chartElement, chartData);
                }             
            })
        }
    }
}]);

application.directive('lineMessage', [function() {
    return {
        restrict:'E',
        scope: {
            type: '@',
            message: '@',
            actionFunction: '=',
            actionMessage: '@'
        },
        template: '<div ng-show="message" class="card line-message text-no-select" ng-class="\'bg-light-theme-\'+types[type].theme" layout="row" layout-align="start center"><md-icon class="material-icons text-size-d">{{types[type].icon}}</md-icon><div class="right" layout-xs="column" layout-gt-xs="row" flex><div class="message" ng-bind-html="message" flex></div><div class="action" ng-if="actionFunction" ng-click="actionFunction()">{{actionMessage}}</div></div></div',
        link: function (scope, elements, attributes) {
            scope.types = {"error":{"icon":"error","theme":"red"},"warning":{"icon":"warning","theme":"orange"},"info":{"icon":"info","theme":"teal"},"help":{"icon":"help","theme":"blue"}};
        }
    }
}]);

application.directive('help', [function() {
    return {
        restrict:'E',
        scope: {
            message: '='
        },
        template: '<div ng-show="message" class="padtb10" layout="row" layout-align="start center"><md-icon class="material-icons mrg0 text-size-e mrgrt10 text-theme-blue">help</md-icon><div class="text-16 text-theme-grey" ng-bind="message"></div></div>',
        link: function (scope, elements, attributes) { }
    }
}]);


application.filter('isEmpty', function() {
	return function(input, inverse) {
		if(!inverse) {
			inverse = false;
		}
		var output = _.isEmpty(input);
  	return output != inverse;
	}
})

application.filter('isDefined', function() {
  return function(input, inverse) {
    if(!inverse) {
      inverse = false;
    }
    var output = angular.isDefined(input);
    return output != inverse;
  }
})

application.filter('permission', function() {
	return function(input, permission) {
    	var output = _.filter(input, function(user, userId) {
    		return user.p == permission;
    	});
    	return output
  	}
})